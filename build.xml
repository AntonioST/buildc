<?xml version="1.0" encoding="UTF-8"?>
<project name="project"
         default="build"
         xmlns:ivy="antlib:org.apache.ivy.ant"
         xmlns:contrib="antlib:net.sf.antcontrib">
    <description></description>
    <target name="build" depends="init,clean,compile,jar"/>
    <!--
    custom section
    -->
    <target name="-pre-init">
        <!--empty-->
    </target>
    <target name="-post-init">
        <!--empty-->
    </target>
    <target name="-pre-compile">
        <!--empty-->
    </target>
    <target name="-post-compile">
        <!--empty-->
    </target>
    <target name="-pre-jar">
        <!--empty-->
    </target>
    <target name="-post-jar">
        <!--empty-->
    </target>
    <target name="-pre-test">
        <!--empty-->
    </target>
    <target name="-post-test">
        <!--empty-->
    </target>
    <target name="-pre-release">
        <!--empty-->
    </target>
    <target name="-post-release">
        <!--empty-->
    </target>
    <target name="-post-clean">
        <!--empty-->
    </target>
    <!--
    initial section
    -->
    <target name="-init-properties" depends="-pre-init">
        <property file="build.properties"/>
    </target>
    <target name="-do-init" depends="-pre-init,-init-properties">
        <condition property="exist.manifest.file">
            <and>
                <isset property="manifest.file"/>
                <not>
                    <equals arg1="${manifest.file}" arg2="" trim="true"/>
                </not>
                <available file="${manifest.file}"/>
            </and>
        </condition>
        <condition property="exist.splash.image">
            <and>
                <isset property="splash.image"/>
                <not>
                    <equals arg1="${splash.image}" arg2="" trim="true"/>
                </not>
                <available file="${splash.image}"/>
            </and>
        </condition>
        <condition property="exist.main.class">
            <and>
                <isset property="main.class"/>
                <not>
                    <equals arg1="${main.class}" arg2="" trim="true"/>
                </not>
            </and>
        </condition>
        <available property="exist.git" file=".git" type="dir"/>
        <available property="exist.test" file="${test.dir}" type="dir"/>
        <available property="exist.lib" file="${lib.dir}" type="dir"/>
        <available property="exist.res" file="${res.dir}" type="dir"/>
        <property name="test.result.dir" value="${build.dir}/result"/>
    </target>
    <!--
    checking section
    -->
    <target name="-check-project-git-version" depends="-do-init" if="exist.git" unless="project.version">
        <exec executable="git"
              outputproperty="git.version.output"
              resultproperty="git.version.result"
              failonerror="false">
            <arg value="describe"/>
            <arg value="--tags"/>
        </exec>
        <contrib:if>
            <equals arg1="${git.version.result}" arg2="0"/>
            <contrib:then>
                <property name="project.version" value="${git.version.output}"/>
            </contrib:then>
        </contrib:if>
    </target>
    <target name="-check-project-snapshot-version" unless="project.version">
        <tstamp>
            <format property="stamp" pattern="yyyymmdd"/>
        </tstamp>
        <property name="project.version" value="snapshot-${stamp}"/>
    </target>
    <target name="-check-project-version" depends="-check-project-git-version,-check-project-snapshot-version">
        <echo message="project.version=${project.version}"/>
    </target>
    <target name="-check-jar-file" depends="-check-project-version" unless="jar.file">
        <property name="jar.file" value="${project.name}-${project.version}.jar"/>
        <echo message="jar.file=${jar.file}"/>
    </target>
    <target name="-check-dir">
        <fail unless="src.dir">Must set src.dir</fail>
        <fail unless="test.dir">Must set test.dir</fail>
        <fail unless="build.dir">Must set build.dir</fail>
        <property name="build.classes.dir" value="${build.dir}/classes"/>
        <property name="build.test.dir" value="${build.dir}/test/classes"/>
        <property name="build.javadoc.dir" value="${build.dir}/javadoc"/>
        <property name="build.jar.dir" value="${build.dir}/jar"/>
        <property name="build.meta.dir" value="${build.dir}/META-INF"/>
    </target>
    <target name="-check-single-file">
        <fail unless="single.file">Must set single.file</fail>
    </target>
    <target name="-init-check" depends="-check-jar-file,-check-dir"/>
    <!--
    initial macro section
    -->
    <target name="-init-macro-javac">
        <macrodef name="javac-macro">
            <attribute name="srcdir" default="${src.dir}"/>
            <attribute name="destdir" default="${build.classes.dir}"/>
            <attribute name="classpath" default="${compile.classpath}"/>
            <attribute name="includes" default="${src.include}"/>
            <attribute name="excludes" default="${src.exclude}"/>
            <attribute name="debug" default="${javac.debug}"/>
            <element name="customize" optional="true"/>
            <sequential>
                <javac classpath="@{classpath}"
                       srcdir="@{srcdir}"
                       sourcepath="${basedir}/@{srcdir}"
                       destdir="@{destdir}"
                       includes="@{includes}"
                       excludes="@{excludes}"
                       source="${javac.source}"
                       target="${javac.target}"
                       includeantruntime="no"
                       includejavaruntime="no"
                       debug="@{debug}"
                       listfiles="true">
                    <compilerarg line="${javac.jvmargs}"/>
                    <customize/>
                </javac>
            </sequential>
        </macrodef>
    </target>
    <target name="-init-macro-test">
        <macrodef name="test-marco">
            <element name="testcase"/>
            <sequential>
                <mkdir dir="${test.result.dir}"/>
                <junit tempdir="${test.result.dir}"
                       printsummary="on"
                       haltonfailure="false"
                       haltonerror="false"
                       fork="true">
                    <classpath path="${build.classes.dir}"/>
                    <classpath path="${build.test.dir}"/>
                    <classpath path="${runtime.test.classpath}"/>
                    <formatter type="plain"/>
                    <jvmarg line="${test.jvmargs}"/>
                    <testcase/>
                </junit>
            </sequential>
        </macrodef>
    </target>
    <target name="-init-macro-test-all" depends="-init-macro-test">
        <macrodef name="test-all-marco">
            <sequential>
                <test-marco>
                    <testcase>
                        <batchtest todir="${test.result.dir}">
                            <fileset dir="${test.dir}"/>
                        </batchtest>
                    </testcase>
                </test-marco>
            </sequential>
        </macrodef>
    </target>
    <target name="-init-macro-test-single-class" depends="-init-macro-test">
        <macrodef name="test-single-class-marco">
            <attribute name="class"/>
            <sequential>
                <test-marco>
                    <testcase>
                        <test name="@{class}"
                              todir="${test.result.dir}"
                              outfile="@{class}.result"/>
                    </testcase>
                </test-marco>
            </sequential>
        </macrodef>
    </target>
    <target name="-init-macro-test-single-method" depends="-init-macro-test">
        <macrodef name="test-single-method-marco">
            <attribute name="class"/>
            <attribute name="method"/>
            <sequential>
                <test-marco>
                    <testcase>
                        <test name="@{class}"
                              methods="@{method}"
                              todir="${test.result.dir}"
                              outfile="@{class}.@{method}.result"/>
                    </testcase>
                </test-marco>
            </sequential>
        </macrodef>
    </target>
    <target name="-init-macro-tests"
            depends="-init-macro-test,-init-macro-test-all,-init-macro-test-single-class,-init-macro-test-single-method"/>
    <target name="-init-macro" depends="-init-macro-javac,-init-macro-tests"/>
    <target name="init" depends="-pre-init,-do-init,-init-check,-init-macro,-post-init"/>
    <!--
    dependencies section
    -->
    <target name="-check-ivy">
        <available property="exist.ivy" file="ivy.xml" type="file"/>
    </target>
    <target name="-try-retrieve" depends="-do-init,-check-ivy" if="exist.ivy" unless="exist.lib">
        <ivy:retrieve/>
    </target>
    <target name="retrieve" depends="-check-ivy" if="exist.ivy">
        <ivy:retrieve/>
    </target>
    <!--
    compile section
    -->

    <target name="-do-compile-dir">
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build.classes.dir}"/>
    </target>
    <target name="-do-compile" depends="-do-compile-dir">
        <javac-macro/>
    </target>
    <target name="-do-resource" if="exist.res">
        <mkdir dir="${build.classes.dir}/${res.dir}"/>
        <copy todir="${build.classes.dir}/${res.dir}">
            <fileset dir="${res.dir}" excludes="META-INF/"/>
        </copy>
    </target>
    <target name="-do-compile-single" depends="-check-single-file,-do-compile-dir">
        <javac-macro includes="${single.file}"/>
    </target>

    <target name="compile" depends="init,-try-retrieve,-pre-compile,-do-compile,-do-resource,-post-compile"/>
    <target name="compile-single" depends="init,-try-retrieve,-pre-compile,-do-compile-single,-post-compile"/>
    <!--
    jar section
    -->
    <target name="-init-jar">
        <mkdir dir="${build.jar.dir}"/>
    </target>
    <target name="-pre-manifest">
        <property name="jar.manifest.file" value="${build.dir}/MANIFEST.MF"/>
    </target>
    <target name="-create-manifest" depends="-do-init,-pre-manifest" unless="exist.manifest.file">
        <touch file="${jar.manifest.file}"/>
    </target>
    <target name="-copy-manifest" depends="-do-init,-pre-manifest" if="exist.manifest.file">
        <copy file="manifest.file" tofile="${jar.manifest.file}"/>
    </target>
    <target name="-init-manifest" depends="-do-init,-create-manifest,-copy-manifest"/>
    <target name="-do-manifest-main-class" depends="-init-manifest" if="main.class">
        <manifest file="${jar.manifest.file}" mode="update">
            <attribute name="Main-Class" value="${main.class}"/>
        </manifest>
    </target>
    <target name="-do-manifest-classpath" depends="-init-manifest" if="copy.lib">
        <mkdir dir="${build.jar.dir}/${lib.dir}"/>
        <contrib:for list="${runtime.classpath}" param="cp" delimiter=":">
            <sequential>
                <manifest file="${jar.manifest.file}" mode="update">
                    <attribute name="Class-Path" value="@{cp}"/>
                </manifest>
                <copy file="@{cp}" todir="${build.jar.dir}/${lib.dir}"/>
            </sequential>
        </contrib:for>
    </target>
    <target name="-do-manifest-splash" depends="-do-init,-init-jar,-init-manifest" if="exist.splash.image">
        <basename file="${splash.image}" property="splash.image.basename"/>
        <mkdir dir="${build.meta.dir}"/>
        <copy failonerror="false" file="${splash.image}" todir="${build.meta.dir}"/>
        <manifest file="${jar.manifest.file}" mode="update">
            <attribute name="SplashScreen-Image" value="META-INF/${splash.image.basename}"/>
        </manifest>
    </target>
    <target name="-do-manifest" depends="-do-manifest-main-class,-do-manifest-classpath,-do-manifest-splash"/>
    <target name="-do-meta" depends="-init-jar">
        <contrib:if>
            <available file="${res.dir}/META-INF" type="dir"/>
            <contrib:then>
                <mkdir dir="${build.meta.dir}"/>
                <copy todir="${build.meta.dir}">
                    <fileset dir="${res.dir}/META-INF"/>
                </copy>
            </contrib:then>
        </contrib:if>
    </target>
    <target name="-do-jar" depends="-do-manifest,-do-meta">
        <contrib:if>
            <available file="${build.meta.dir}" type="dir"/>
            <contrib:then>
                <jar destfile="${build.jar.dir}/${jar.file}"
                     manifest="${jar.manifest.file}">
                    <metainf dir="${build.meta.dir}"/>
                    <fileset dir="${build.classes.dir}"/>
                </jar>
            </contrib:then>
            <contrib:else>
                <jar destfile="${build.jar.dir}/${jar.file}"
                     manifest="${jar.manifest.file}">
                    <fileset dir="${build.classes.dir}"/>
                </jar>
            </contrib:else>
        </contrib:if>
    </target>
    <target name="jar" depends="init,compile,-pre-jar,-init-jar,-do-jar,-post-jar"/>
    <!--
    javadoc section
   -->
    <target name="javadoc" depends="init">
        <mkdir dir="${build.javadoc.dir}"/>
        <javadoc classpath="${compile.classpath}"
                 destdir="${build.javadoc.dir}"
                 author="author"
                 version="version"
                 charset="UTF-8"
                 noindex="false"
                 nonavbar="false"
                 notree="false"
                 private="false"
                 splitindex="false"
                 windowtitle="${project.name} API"
                 failonerror="true">
            <fileset dir="${src.dir}" includes="${src.include}" excludes="${src.exclude}"/>
        </javadoc>
    </target>
    <!--
    run section
    -->
    <target name="-run-config" if="run.config">
        <available property="exist.run.config" file="${run.config}" type="file"/>
        <contrib:if>
            <not>
                <equals arg1="${exist.run.config}" arg2="" trim="true"/>
            </not>
            <contrib:then>
                <property file="${run.config}"/>
            </contrib:then>
        </contrib:if>
    </target>
    <target name="run" depends="-run-config,init,compile">
        <fail unless="main.class">Must set main.class</fail>
        <property name="classpath" value=""/>
        <property name="program.args" value=""/>
        <java classpath="${runtime.classpath}:${build.classes.dir}:${classpath}"
              classname="${main.class}"
              failonerror="true">
            <jvmarg line="${java.jvmargs}"/>
            <arg line="${program.args}"/>
        </java>
    </target>
    <target name="run-jar" depends="-run-config,init,compile,jar">
        <property name="classpath" value=""/>
        <property name="program.args" value=""/>
        <java classpath="${classpath}"
              jar="${build.jar.dir}/${jar.file}"
              failonerror="true">
            <jvmarg line="${java.jvmargs}"/>
            <arg line="${program.args}"/>
        </java>
    </target>
    <target name="run-single" depends="init,compile">
        <fail unless="main.class">Must set main.class</fail>
        <java classpath="${runtime.classpath}:${build.classes.dir}"
              classname="${main.class}"
              failonerror="true">
            <jvmarg line="${java.jvmargs}"/>
        </java>
    </target>
    <!--
    test section
    -->
    <target name="-build-test" if="exist.test">
        <mkdir dir="${build.test.dir}"/>
        <javac-macro classpath="${build.classes.dir}:${compile.test.classpath}"
                     srcdir="${test.dir}"
                     destdir="${build.test.dir}"/>
    </target>

    <target name="-do-test" if="exist.test">
        <test-all-marco/>
    </target>
    <target name="-do-test-get-class-name" depends="-check-single-file">
        <contrib:propertyregex property="test.class.name"
                               input="${single.file}"
                               regexp="${test.dir}/(.+)\.java"
                               select="\1"/>
        <contrib:propertyregex property="test.class.name"
                               input="${test.class.name}"
                               regexp="/"
                               replace="."
                               override="true"/>
    </target>
    <target name="-do-test-single-class" depends="-do-test-get-class-name">
        <fail unless="exist.test">Test file does not exist</fail>
        <test-single-class-marco class="${test.class.name}"/>
    </target>
    <target name="-do-test-single-method" depends="-do-test-get-class-name">
        <fail unless="exist.test">Test file does not exist</fail>
        <fail unless="single.method">Must set single.method</fail>
        <test-single-method-marco class="${test.class.name}"
                                  method="${single.method}"/>
    </target>

    <target name="test" depends="init,compile,-build-test,-pre-test,-do-test,-post-test"/>
    <target name="test-single-class" depends="init,compile,-build-test,-pre-test,-do-test-single-class,-post-test"/>
    <target name="test-single-method" depends="init,compile,-build-test,-pre-test,-do-test-single-method,-post-test"/>
    <!--
    release section
    -->

    <target name="-init-release">
        <mkdir dir="${release.dir}"/>
    </target>
    <target name="-do-release-bin">
        <zip destfile="${release.dir}/${project.name}-${project.version}-bin.zip">
            <fileset dir="${build.jar.dir}"/>
        </zip>
    </target>
    <target name="-do-release-src" if="release.src">
        <contrib:if>
            <available file="${res.dir}" type="dir"/>
            <contrib:then>
                <zip destfile="${release.dir}/${project.name}-${project.version}-src.zip">
                    <fileset dir="${src.dir}"/>
                    <fileset dir="${res.dir}"/>
                </zip>
            </contrib:then>
            <contrib:else>
                <zip destfile="${release.dir}/${project.name}-${project.version}-src.zip">
                    <fileset dir="${src.dir}"/>
                </zip>
            </contrib:else>
        </contrib:if>
    </target>
    <target name="-do-release-javadoc" if="release.javadoc">
        <zip destfile="${release.dir}/${project.name}-${project.version}-javadoc.zip">
            <fileset dir="${build.javadoc.dir}"/>
        </zip>
    </target>
    <target name="release-bin"
            depends="init,compile,test,jar,-pre-release,-init-release,-do-release-bin,-post-release"/>
    <target name="release-src" depends="init,compile,test,-pre-release,-init-release,-do-release-src,-post-release"/>
    <target name="release-javadoc"
            depends="init,compile,test,javadoc,-pre-release,-init-release,-do-release-javadoc,-post-release"/>
    <target name="release"
            depends="init,compile,test,jar,javadoc,-pre-release,-init-release,-do-release-bin,-do-release-src,-do-release-javadoc,-post-release"/>
    <!--
    clean section
    -->
    <target name="-do-clean">
        <delete dir="${build.dir}"/>
    </target>

    <target name="clean" depends="init,-do-clean,-post-clean"/>
    <target name="clean-all" depends="init, clean">
        <delete dir="${lib.dir}"/>
    </target>
</project>