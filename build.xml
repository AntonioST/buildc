<?xml version="1.0" encoding="UTF-8"?>
<project name="project"
         default="build"
         xmlns:ivy="antlib:org.apache.ivy.ant"
         xmlns:contrib="antlib:net.sf.antcontrib"
         xmlns:jacoco="antlib:org.jacoco.ant">
    <description></description>
    <target name="build" depends="init,clean,compile,jar"/>
    <!--
    custom section
    -->
    <target name="-pre-init">
        <!--empty-->
    </target>
    <target name="-post-init">
        <!--empty-->
    </target>
    <target name="-pre-compile">
        <!--empty-->
    </target>
    <target name="-post-compile">
        <!--empty-->
    </target>
    <target name="-pre-jar">
        <!--empty-->
    </target>
    <target name="-post-jar">
        <!--empty-->
    </target>
    <target name="-pre-test">
        <!--empty-->
    </target>
    <target name="-post-test">
        <!--empty-->
    </target>
    <target name="-pre-release">
        <!--empty-->
    </target>
    <target name="-post-release">
        <!--empty-->
    </target>
    <target name="-pre-publish">
        <!--empty-->
    </target>
    <target name="-post-publish">
        <!--empty-->
    </target>
    <target name="-post-clean">
        <!--empty-->
    </target>
    <!--
    dependencies section
    -->
    <target name="-check-ivy">
        <available property="exist.ivy" file="ivy.xml" type="file"/>
    </target>
    <target name="-try-retrieve" depends="-init-private,-check-ivy" if="exist.ivy" unless="exist.lib">
        <ivy:retrieve pattern="${lib.dir}/[conf]/[artifact].[ext]"/>
    </target>
    <target name="retrieve" depends="-init-private,-check-ivy" if="exist.ivy">
        <ivy:retrieve pattern="${lib.dir}/[conf]/[artifact].[ext]"/>
    </target>
    <!--
    initial section
    -->
    <target name="-init-private" depends="-pre-init">
        <!--default directory-->
        <property name="src.dir" value="src"/>
        <property name="test.dir" value="test"/>
        <property name="build.dir" value="build"/>
        <property name="res.dir" value="res"/>
        <property name="lib.dir" value="lib"/>
        <property name="lib.core.dir" value="${lib.dir}/core"/>
        <property name="lib.compile.dir" value="${lib.dir}/compile"/>
        <property name="lib.runtime.dir" value="${lib.dir}/runtime"/>
        <property name="lib.test.dir" value="${lib.dir}/test"/>
        <available property="exist.lib" file="${lib.dir}" type="dir"/>
    </target>
    <target name="-init-properties" depends="-pre-init,-init-private">
        <contrib:if>
            <available file="build.properties"/>
            <contrib:then>
                <property file="build.properties"/>
            </contrib:then>
        </contrib:if>
    </target>
    <target name="-do-init" depends="-pre-init,-init-private,-init-properties,-try-retrieve">
        <property name="project.name" value="${ant.project.name}"/>
        <!--default directory-->
        <property name="build.classes.dir" value="${build.dir}/classes"/>
        <property name="build.test.dir" value="${build.dir}/test/classes"/>
        <property name="build.javadoc.dir" value="${build.dir}/javadoc"/>
        <property name="build.jar.dir" value="${build.dir}/jar"/>
        <property name="build.meta.dir" value="${build.dir}/META-INF"/>
        <property name="test.result.dir" value="${build.dir}/result"/>
        <property name="coverage.result.dir" value="${build.dir}/jacoco"/>
        <property name="coverage.report.dir" value="${coverage.result.dir}/report"/>
        <property name="jar.lib.dir" value="lib"/>
        <property name="release.dir" value="release"/>
        <!--exist property-->
        <condition property="exist.manifest.file">
            <and>
                <isset property="manifest.file"/>
                <not>
                    <equals arg1="${manifest.file}" arg2="" trim="true"/>
                </not>
                <available file="${manifest.file}"/>
            </and>
        </condition>
        <condition property="exist.splash.image">
            <and>
                <isset property="splash.image"/>
                <not>
                    <equals arg1="${splash.image}" arg2="" trim="true"/>
                </not>
                <available file="${splash.image}"/>
            </and>
        </condition>
        <condition property="exist.readme.file">
            <and>
                <isset property="readme.file"/>
                <not>
                    <equals arg1="${readme.file}" arg2="" trim="true"/>
                </not>
                <available file="${readme.file}"/>
            </and>
        </condition>
        <condition property="exist.main.class">
            <and>
                <isset property="main.class"/>
                <not>
                    <equals arg1="${main.class}" arg2="" trim="true"/>
                </not>
            </and>
        </condition>
        <available property="exist.git" file=".git" type="dir"/>
        <available property="exist.test" file="${test.dir}" type="dir"/>
        <available property="exist.res" file="${res.dir}" type="dir"/>
        <!--default value-->
        <property name="javac.source" value="1.8"/>
        <property name="javac.target" value="1.8"/>
        <property name="javac.debug" value="true"/>
        <property name="javac.jvmargs" value=""/>
        <property name="src.include" value="**"/>
        <property name="src.exclude" value=""/>
        <property name="release.src" value="false"/>
        <property name="release.javadoc" value="false"/>
        <!--default classpath-->
        <property name="core.classpath" value=""/>
        <property name="compile.classpath" value=""/>
        <property name="runtime.classpath" value=""/>
        <property name="test.classpath" value=""/>
        <contrib:if>
            <available file="${lib.compile.dir}" type="dir"/>
            <contrib:then>
                <fileset id="lib.compile.set" dir="${lib.compile.dir}">
                    <include name="**/*.jar"/>
                </fileset>
                <pathconvert property="default.compile.classpath" pathsep=":" refid="lib.compile.set">
                    <map from="${user.dir}/" to=""/>
                </pathconvert>
                <property name="real.compile.classpath"
                          value="${compile.classpath}:${default.compile.classpath}:${core.classpath}"/>
            </contrib:then>
            <contrib:else>
                <property name="real.compile.classpath" value="${compile.classpath}:${core.classpath}"/>
            </contrib:else>
        </contrib:if>
        <contrib:if>
            <available file="${lib.runtime.dir}" type="dir"/>
            <contrib:then>
                <fileset id="lib.runtime.set" dir="${lib.runtime.dir}">
                    <include name="**/*.jar"/>
                </fileset>
                <pathconvert property="default.runtime.classpath" pathsep=":" refid="lib.runtime.set">
                    <map from="${user.dir}/" to=""/>
                </pathconvert>
                <property name="real.runtime.classpath"
                          value="${runtime.classpath}:${default.runtime.classpath}:${core.classpath}"/>
            </contrib:then>
            <contrib:else>
                <property name="real.runtime.classpath" value="${runtime.classpath}:${core.classpath}"/>
            </contrib:else>
        </contrib:if>
        <contrib:if>
            <available file="${lib.test.dir}" type="dir"/>
            <contrib:then>
                <fileset id="lib.test.set" dir="${lib.test.dir}">
                    <include name="**/*.jar"/>
                </fileset>
                <pathconvert property="default.test.classpath" pathsep=":" refid="lib.test.set">
                    <map from="${user.dir}/" to=""/>
                </pathconvert>
                <property name="real.test.classpath"
                          value="${test.classpath}:${default.test.classpath}:${core.classpath}"/>
            </contrib:then>
            <contrib:else>
                <property name="real.test.classpath" value="${test.classpath}:${core.classpath}"/>
            </contrib:else>
        </contrib:if>
        <echo message="compile.classpath=${real.compile.classpath}"/>
        <echo message="runtime.classpath=${real.runtime.classpath}"/>
        <echo message="test.classpath=${real.test.classpath}"/>
    </target>
    <!--
    checking section
    -->
    <target name="-check-project-git-version" depends="-do-init" if="exist.git" unless="project.version">
        <exec executable="git"
              outputproperty="git.version.output"
              resultproperty="git.version.result"
              failonerror="false">
            <arg value="describe"/>
            <arg value="--tags"/>
        </exec>
        <contrib:if>
            <equals arg1="${git.version.result}" arg2="0"/>
            <contrib:then>
                <property name="project.version" value="${git.version.output}"/>
                <echo message="git version=${git.version.output}"/>
            </contrib:then>
        </contrib:if>
    </target>
    <target name="-check-project-snapshot-version" unless="project.version">
        <tstamp>
            <format property="stamp" pattern="yyyyMMdd"/>
        </tstamp>
        <property name="project.version" value="snapshot-${stamp}"/>
        <echo message="time stamp version=${project.version}"/>
    </target>
    <target name="-check-project-version" depends="-check-project-git-version,-check-project-snapshot-version">
        <echo message="project.version=${project.version}"/>
    </target>
    <target name="-check-jar-file" depends="-check-project-version" unless="jar.file">
        <property name="jar.file" value="${project.name}-${project.version}.jar"/>
    </target>
    <target name="-init-check" depends="-check-jar-file">
        <echo message="jar.file=${jar.file}"/>
    </target>
    <!--
    initial macro section
    -->
    <target name="-init-macro-javac">
        <macrodef name="javac-macro">
            <attribute name="srcdir" default="${src.dir}"/>
            <attribute name="destdir" default="${build.classes.dir}"/>
            <attribute name="classpath" default="${real.test.classpath}"/>
            <attribute name="includes" default="${src.include}"/>
            <attribute name="excludes" default="${src.exclude}"/>
            <element name="customize" optional="true"/>
            <sequential>
                <javac classpath="@{classpath}"
                       srcdir="@{srcdir}"
                       sourcepath="${basedir}/@{srcdir}"
                       destdir="@{destdir}"
                       includes="@{includes}"
                       excludes="@{excludes}"
                       source="${javac.source}"
                       target="${javac.target}"
                       includeantruntime="no"
                       includejavaruntime="no"
                       debug="${javac.debug}"
                       fork="true"
                       listfiles="true">
                    <compilerarg line="${javac.jvmargs}"/>
                    <customize/>
                </javac>
            </sequential>
        </macrodef>
    </target>
    <target name="-init-macro-test">
        <macrodef name="test-marco">
            <element name="testcase"/>
            <sequential>
                <mkdir dir="${test.result.dir}"/>
                <junit tempdir="${test.result.dir}"
                       printsummary="withOutAndErr"
                       haltonfailure="false"
                       haltonerror="false"
                       fork="true">
                    <classpath path="${build.classes.dir}"/>
                    <classpath path="${build.test.dir}"/>
                    <classpath path="${real.test.classpath}"/>
                    <formatter type="brief"/>
                    <jvmarg line="${test.jvmargs}"/>
                    <testcase/>
                </junit>
            </sequential>
        </macrodef>
    </target>
    <target name="-init-macro-test-all" depends="-init-macro-test">
        <macrodef name="test-all-marco">
            <sequential>
                <delete dir="${test.result.dir}" failonerror="false"/>
                <test-marco>
                    <testcase>
                        <batchtest todir="${test.result.dir}">
                            <fileset dir="${test.dir}"/>
                        </batchtest>
                    </testcase>
                </test-marco>
            </sequential>
        </macrodef>
    </target>
    <target name="-init-macro-test-class" depends="-init-macro-test">
        <macrodef name="test-class-marco">
            <attribute name="class"/>
            <sequential>
                <test-marco>
                    <testcase>
                        <test name="@{class}"
                              todir="${test.result.dir}"/>
                    </testcase>
                </test-marco>
            </sequential>
        </macrodef>
    </target>
    <target name="-init-macro-test-method" depends="-init-macro-test">
        <macrodef name="test-method-marco">
            <attribute name="class"/>
            <attribute name="method"/>
            <sequential>
                <test-marco>
                    <testcase>
                        <test name="@{class}"
                              methods="@{method}"
                              todir="${test.result.dir}"/>
                    </testcase>
                </test-marco>
            </sequential>
        </macrodef>
    </target>
    <target name="-init-macro-tests"
            depends="-init-macro-test,-init-macro-test-all,-init-macro-test-class,-init-macro-test-method"/>
    <target name="-init-macro" depends="-init-macro-javac,-init-macro-tests"/>
    <target name="init" depends="-pre-init,-do-init,-init-check,-init-macro,-post-init"/>

    <!--
    compile section
    -->
    <target name="-do-compile-dir">
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build.classes.dir}"/>
    </target>
    <target name="-do-compile" depends="-do-compile-dir">
        <javac-macro/>
    </target>
    <target name="-do-resource" if="exist.res">
        <mkdir dir="${build.classes.dir}/${res.dir}"/>
        <copy todir="${build.classes.dir}/${res.dir}">
            <fileset dir="${res.dir}" excludes="META-INF/"/>
        </copy>
    </target>
    <target name="-do-compile-single" depends="-do-compile-dir">
        <fail unless="single.file">Must set single.file</fail>
        <javac-macro includes="${single.file}"/>
    </target>

    <target name="compile" depends="init,-pre-compile,-do-compile,-do-resource,-post-compile"/>
    <target name="compile-single" depends="init,-pre-compile,-do-compile-single,-post-compile"/>
    <!--
    jar section
    -->
    <target name="-init-jar">
        <mkdir dir="${build.jar.dir}"/>
    </target>
    <target name="-pre-manifest">
        <property name="jar.manifest.file" value="${build.dir}/MANIFEST.MF"/>
    </target>
    <target name="-create-manifest" depends="-do-init,-pre-manifest" unless="exist.manifest.file">
        <touch file="${jar.manifest.file}"/>
    </target>
    <target name="-copy-manifest" depends="-do-init,-pre-manifest" if="exist.manifest.file">
        <copy file="manifest.file" tofile="${jar.manifest.file}"/>
    </target>
    <target name="-init-manifest" depends="-do-init,-create-manifest,-copy-manifest"/>
    <target name="-do-manifest-main-class" depends="-init-manifest" if="main.class">
        <manifest file="${jar.manifest.file}" mode="update">
            <attribute name="Main-Class" value="${main.class}"/>
        </manifest>
    </target>
    <target name="-do-manifest-classpath" depends="-init-manifest" if="jar.lib.copy">
        <contrib:if>
            <equals arg1="${jar.lib.jar}" arg2=""/>
            <contrib:then>
                <contrib:for list="${real.runtime.classpath}" param="cp" delimiter=":">
                    <sequential>
                        <copy file="@{cp}" todir="${build.jar.dir}"/>
                        <contrib:propertyregex property="cplib"
                                               input="${cp}"
                                               regexp="${lib.dir}/.+/(.+)"
                                               select="\1"/>
                        <manifest file="${jar.manifest.file}" mode="update">
                            <attribute name="Class-Path" value="${cplib}"/>
                        </manifest>
                    </sequential>
                </contrib:for>
            </contrib:then>
            <contrib:else>
                <mkdir dir="${build.jar.dir}/${jar.lib.dir}"/>
                <contrib:for list="${real.runtime.classpath}" param="cp" delimiter=":">
                    <sequential>
                        <copy file="@{cp}" todir="${build.jar.dir}/${jar.lib.dir}"/>
                        <contrib:propertyregex property="cplib"
                                               input="@{cp}"
                                               regexp=".+/([^/]+)"
                                               select="\1"/>
                        <manifest file="${jar.manifest.file}" mode="update">
                            <attribute name="Class-Path" value="${jar.lib.dir}/${cplib}"/>
                        </manifest>
                    </sequential>
                </contrib:for>
            </contrib:else>
        </contrib:if>
    </target>
    <target name="-do-manifest-splash" depends="-do-init,-init-jar,-init-manifest" if="exist.splash.image">
        <basename file="${splash.image}" property="splash.image.basename"/>
        <mkdir dir="${build.meta.dir}"/>
        <copy failonerror="false" file="${splash.image}" todir="${build.meta.dir}"/>
        <manifest file="${jar.manifest.file}" mode="update">
            <attribute name="SplashScreen-Image" value="META-INF/${splash.image.basename}"/>
        </manifest>
    </target>
    <target name="-do-manifest" depends="-do-manifest-main-class,-do-manifest-classpath,-do-manifest-splash"/>
    <target name="-do-meta" depends="-init-jar">
        <contrib:if>
            <available file="${res.dir}/META-INF" type="dir"/>
            <contrib:then>
                <mkdir dir="${build.meta.dir}"/>
                <copy todir="${build.meta.dir}">
                    <fileset dir="${res.dir}/META-INF"/>
                </copy>
            </contrib:then>
        </contrib:if>
    </target>
    <target name="-do-readme" if="exist.readme.file">
        <copy file="${readme.file}" todir="${build.jar.dir}"/>
    </target>
    <target name="-do-jar" depends="-do-manifest,-do-meta">
        <contrib:if>
            <available file="${build.meta.dir}" type="dir"/>
            <contrib:then>
                <jar destfile="${build.jar.dir}/${jar.file}"
                     manifest="${jar.manifest.file}">
                    <metainf dir="${build.meta.dir}"/>
                    <fileset dir="${build.classes.dir}"/>
                </jar>
            </contrib:then>
            <contrib:else>
                <jar destfile="${build.jar.dir}/${jar.file}"
                     manifest="${jar.manifest.file}">
                    <fileset dir="${build.classes.dir}"/>
                </jar>
            </contrib:else>
        </contrib:if>
    </target>
    <target name="jar" depends="init,compile,-pre-jar,-init-jar,-do-jar,-post-jar"/>
    <!--
    javadoc section
   -->
    <target name="javadoc" depends="init">
        <mkdir dir="${build.javadoc.dir}"/>
        <javadoc classpath="${real.compile.classpath}"
                 destdir="${build.javadoc.dir}"
                 author="author"
                 version="version"
                 charset="UTF-8"
                 noindex="false"
                 nonavbar="false"
                 notree="false"
                 private="false"
                 splitindex="false"
                 windowtitle="${project.name} API"
                 failonerror="true">
            <fileset dir="${src.dir}" includes="${src.include}" excludes="${src.exclude}"/>
        </javadoc>
    </target>
    <!--
    run section
    -->
    <target name="-run-config" if="run.config">
        <contrib:if>
            <available file="${run.config}" type="file"/>
            <contrib:then>
                <property file="${run.config}"/>
            </contrib:then>
            <contrib:else>
                <fail>cannot find file ${run.config}</fail>
            </contrib:else>
        </contrib:if>
    </target>
    <target name="run" depends="-run-config,init,compile">
        <fail unless="main.class">Must set main.class</fail>
        <property name="classpath" value=""/>
        <property name="java.jvmargs" value=""/>
        <property name="program.args" value=""/>
        <java classpath="${real.runtime.classpath}:${build.classes.dir}:${classpath}"
              classname="${main.class}"
              fork="true"
              failonerror="true">
            <jvmarg line="${java.jvmargs}"/>
            <arg line="${program.args}"/>
        </java>
    </target>
    <target name="run-jar" depends="-run-config,init,compile,jar">
        <property name="classpath" value=""/>
        <property name="java.jvmargs" value=""/>
        <property name="program.args" value=""/>
        <java classpath="${classpath}"
              jar="${build.jar.dir}/${jar.file}"
              fork="true"
              failonerror="true">
            <jvmarg line="${java.jvmargs}"/>
            <arg line="${program.args}"/>
        </java>
    </target>
    <target name="run-single" depends="init,compile">
        <fail unless="main.class">Must set main.class</fail>
        <java classpath="${real.runtime.classpath}:${build.classes.dir}"
              classname="${main.class}"
              fork="true"
              failonerror="true">
            <jvmarg line="${java.jvmargs}"/>
        </java>
    </target>
    <!--
    test section
    -->
    <target name="-do-compile-test" if="exist.test">
        <mkdir dir="${build.test.dir}"/>
        <javac-macro classpath="${build.classes.dir}:${real.test.classpath}"
                     srcdir="${test.dir}"
                     destdir="${build.test.dir}"/>
    </target>
    <target name="-do-test" if="exist.test">
        <property name="test.jvmargs" value=""/>
        <test-all-marco/>
    </target>
    <target name="-do-test-check-class">
        <contrib:if>
            <isset property="test.class"/>
            <contrib:elseif>
                <isset id="single.file"/>
                <contrib:then>
                    <contrib:propertyregex property="test.class"
                                           input="${single.file}"
                                           regexp="${test.dir}/(.+)\.java"
                                           select="\1"/>
                    <contrib:propertyregex property="test.class"
                                           input="${test.class}"
                                           regexp="/"
                                           replace="."
                                           override="true"/>
                </contrib:then>
            </contrib:elseif>
            <contrib:else>
                <fail>Must set test.class or single.file</fail>
            </contrib:else>
        </contrib:if>
    </target>
    <target name="-do-test-class" depends="-do-test-check-class">
        <fail unless="exist.test">Test file does not exist</fail>
        <property name="test.jvmargs" value=""/>
        <test-class-marco class="${test.class}"/>
    </target>
    <target name="-do-test-method" depends="-do-test-check-class">
        <fail unless="exist.test">Test file does not exist</fail>
        <fail unless="test.method">Must set single.method</fail>
        <property name="test.jvmargs" value=""/>
        <test-method-marco class="${test.class}"
                           method="${test.method}"/>
    </target>
    <target name="compile-test" depends="init,compile,-do-compile-test"/>
    <target name="test" depends="init,compile,-do-compile-test,-pre-test,-do-test,-post-test"/>
    <target name="test-class"
            depends="init,compile,-do-compile-test,-pre-test,-do-test-class,-post-test"/>
    <target name="test-method"
            depends="init,compile,-do-compile-test,-pre-test,-do-test-method,-post-test"/>
    <!--
    code coverage test section
    -->
    <target name="-do-coverage">
        <fail unless="main.class">Must set main.class</fail>
        <jacoco:coverage>
            <java classpath="${real.runtime.classpath}:${build.classes.dir}"
                  classname="${main.class}"
                  fork="true">
            </java>
        </jacoco:coverage>
    </target>
    <target name="-do-coverage-test" depends="-do-test-check-class">
        <mkdir dir="${coverage.result.dir}"/>
        <jacoco:coverage destfile="${coverage.result.dir}/jacoco.exec">
            <junit fork="true"
                   forkmode="once">
                <test name="${test.class}"/>
                <classpath path="${real.test.classpath}:${build.classes.dir}:${build.test.dir}"/>
            </junit>
        </jacoco:coverage>
    </target>
    <target name="-do-coverage-report">
        <mkdir dir="${coverage.report.dir}"/>
        <jacoco:report>
            <executiondata>
                <file file="${coverage.result.dir}/jacoco.exec"/>
            </executiondata>
            <structure name="Project">
                <classfiles>
                    <fileset dir="${build.classes.dir}"/>
                </classfiles>
                <sourcefiles encoding="UTF-8">
                    <fileset dir="${src.dir}"/>
                </sourcefiles>
            </structure>
            <html destdir="${coverage.report.dir}"/>
        </jacoco:report>
    </target>
    <target name="run-coverage" depends="init,compile,-do-coverage"/>
    <target name="test-coverage"
            depends="init,compile,-do-compile-test,-pre-test,-do-coverage-test,-post-test,-do-coverage-report"/>
    <!--
    release section
    -->
    <target name="-init-release" depends="init,compile,test,jar,-pre-release">
        <mkdir dir="${release.dir}"/>
    </target>
    <target name="-do-release-bin" depends="-init-release">
        <zip destfile="${release.dir}/${project.name}-bin.zip">
            <fileset dir="${build.jar.dir}"/>
        </zip>
    </target>
    <target name="-do-release-src" depends="-init-release" if="release.src">
        <zip destfile="${release.dir}/${project.name}-source.zip">
            <fileset dir=".">
                <include name="${src.dir}/**/*"/>
                <include name="${res.dir}/**/*"/>
                <include name="${readme.file}"/>
                <include name="build.xml"/>
                <include name="build.properties"/>
                <include name="ivy.xml"/>
            </fileset>
        </zip>
    </target>
    <target name="-do-release-javadoc" depends="-init-release,javadoc" if="release.javadoc">
        <zip destfile="${release.dir}/${project.name}-javadoc.zip">
            <fileset dir="${build.javadoc.dir}"/>
        </zip>
    </target>
    <target name="release-bin" depends="-init-release,-do-release-bin,-post-release"/>
    <target name="release-src" depends="-init-release,-do-release-src,-post-release"/>
    <target name="release-javadoc" depends="-init-release,-do-release-javadoc,-post-release"/>
    <target name="release" depends="-init-release,-do-release-bin,-do-release-src,-do-release-javadoc,-post-release"/>
    <!--
    publish section
    -->
    <target name="-init-publish" depends="init,clean,compile,test,jar">
        <ivy:resolve/>
    </target>
    <target name="-do-publish">
        <copy file="${build.jar.dir}/${jar.file}" tofile="${release.dir}/${project.name}.jar"/>
        <ivy:publish conf="core"
                     resolver="local"
                     pubrevision="${project.version}"
                     status="release"
                     overwrite="true"
                     update="true"
                     forcedeliver="true">
            <ivy:artifacts pattern="${release.dir}/[artifact].[ext]"/>
            <ivy:artifacts pattern="${release.dir}/[artifact]-[type].[ext]"/>
        </ivy:publish>
        <echo message="project ${ant.project.name} released with version ${project.version}"/>
    </target>
    <target name="publish"
            depends="-init-publish,release,-pre-publish,-do-publish,-post-publish"/>
    <!--
    clean section
    -->
    <target name="-do-clean">
        <delete dir="${build.dir}"/>
    </target>
    <target name="clean" depends="init,-do-clean,-post-clean"/>
    <target name="clean-all" depends="init, clean">
        <delete dir="${lib.dir}"/>
        <delete dir="${release.dir}"/>
    </target>
</project>
