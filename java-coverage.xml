<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:jacoco="antlib:org.jacoco.ant"
         xmlns:if="ant:if"
         xmlns:unless="ant:unless">
    <!--==============
    dependence library
    ==================

    name    : org.jacoco.ant
    site    :http://mvnrepository.com/artifact/org.jacoco/org.jacoco.ant
    ===============-->

    <!--===========
    import checking
    ============-->
    <fail unless="define.java">should import 'build-java.xml'</fail>
    <fail unless="define.application">should import 'java-application.xml'</fail>
    <fail unless="define.test">should import 'java-test*.xml'</fail>
    <property name="define.coverage" value=""/>

    <!--===========
    initial section
    ============-->
    <property name="build.coverage.dir" value="${build.dir}/jacoco"/>
    <property name="coverage.report.type" value="html"/>

    <!--=================
    Help Document Section
    ==================-->
    <target name="-help-coverage" extensionOf="-help-extend">
        <echo>coverage : run program and profiling coverage</echo>
        <echo>coverage-class : run single main class and profiling coverage</echo>
        <echo>coverage-test : run test and profiling coverage</echo>
        <echo>coverage-test-class : run single test and profiling coverage</echo>
    </target>

    <!--==================
    task define : coverage
    ===================-->
    <target name="-coverage-init">
        <mkdir dir="${build.coverage.dir}"/>
        <property name="coverage.result.file" value="${build.coverage.dir}/jacoco.exec"/>
        <property name="coverage.report.dir" value="${build.coverage.dir}/report"/>
    </target>
    <target name="-coverage-main" depends="-run-prepare,-coverage-init">
        <fail unless="main.class">Must set 'main.class'</fail>
        <jacoco:coverage destfile="${coverage.result.file}">
            <java classname="${main.class}"
                  fork="true"
                  failonerror="true">
                <classpath refid="real.runtime.classpath"/>
                <classpath path="${build.classes.dir}"/>
                <jvmarg line="${java.jvmargs}" if:set="java.jvmargs"/>
                <arg line="${program.args}" if:set="program.args"/>
            </java>
        </jacoco:coverage>
    </target>
    <target name="-coverage-test" depends="-test-prepare,-coverage-init">
        <jacoco:coverage destfile="${coverage.result.file}">
            <junit printsummary="withOutAndErr"
                   haltonfailure="true"
                   haltonerror="true"
                   fork="true">
                <classpath refid="real.test.classpath"/>
                <classpath path="${build.classes.dir}"/>
                <classpath path="${build.test.dir}"/>
                <batchtest todir="${test.result.dir}">
                    <fileset dir="${test.dir}"/>
                </batchtest>
            </junit>
        </jacoco:coverage>
    </target>
    <target name="-coverage-test-class" depends="-test-prepare,-coverage-init">
        <fail unless="class">Must set 'class'</fail>
        <jacoco:coverage destfile="${coverage.result.file}">
            <junit printsummary="withOutAndErr"
                   haltonfailure="true"
                   haltonerror="true"
                   fork="true">
                <classpath refid="real.test.classpath"/>
                <classpath path="${build.classes.dir}"/>
                <classpath path="${build.test.dir}"/>
                <test name="${class}" todir="${test.result.dir}"/>
            </junit>
        </jacoco:coverage>
    </target>

    <!--================
    task define : report
    =================-->
    <target name="-coverage-report" depends="-coverage-init">
        <fail if="coverage.report.type.html">property 'coverage.report.type.html' is used</fail>
        <fail if="coverage.report.type.xml">property 'coverage.report.type.xml' is used</fail>
        <fail if="coverage.report.type.csv">property 'coverage.report.type.csv' is used</fail>
        <condition property="coverage.report.type.html">
            <equals arg1="coverage.report.type" arg2="html"/>
        </condition>
        <condition property="coverage.report.type.xml">
            <equals arg1="coverage.report.type" arg2="xml"/>
        </condition>
        <condition property="coverage.report.type.csv">
            <equals arg1="coverage.report.type" arg2="csv"/>
        </condition>
        <available property="exist.coverage.result" fi1le="${coverage.result.file}"/>
        <fail unless="exist.coverage.result">Coverage Result File doesn't exist</fail>
        <mkdir dir="${coverage.result.file}"/>
        <jacoco:report>
            <executiondata>
                <file file="${coverage.result.file}"/>
            </executiondata>
            <structure name="Project">
                <classfiles>
                    <fileset dir="${build.classes.dir}"/>
                </classfiles>
                <sourcefiles encoding="UTF-8">
                    <fileset dir="${src.dir}"/>
                </sourcefiles>
            </structure>
            <html destdir="${coverage.report.dir}" if:set="coverage.report.type.html"/>
            <xml destdir="${coverage.report.dir}"  if:set="coverage.report.type.xml"/>
            <csv destdir="${coverage.report.dir}"  if:set="coverage.report.type.csv"/>
        </jacoco:report>
    </target>

    <!--=======
    task define
    ========-->
    <target name="coverage" depends="-coverage-main,-post-run,-coverage-report" if="define.application"/>
    <target name="coverage-test" depends="-coverage-test,-post-test,-coverage-report"/>
    <target name="coverage-test-class" depends="-coverage-test-class,-post-test,-coverage-report"/>
</project>