<?xml version="1.0" encoding="UTF-8"?>
<project name="__PROJECT__"
         default="build"
         xmlns:ivy="antlib:org.apache.ivy.ant"
         xmlns:cc="antlib:net.sf.antcontrib"
         xmlns:jacoco="antlib:org.jacoco.ant">
    <description></description>
    <import file=".ant/ant-ivy.xml"/>
    <import file=".ant/ant-macro-exist.xml"/>
    <target name="build" depends="init,clean,compile,test,jar"/>
    <!--
    custom section
    -->
    <target name="-pre-init">
        <!--empty-->
    </target>
    <target name="-post-init">
        <!--empty-->
    </target>
    <target name="-pre-compile">
        <!--empty-->
    </target>
    <target name="-post-compile">
        <!--empty-->
    </target>
    <target name="-pre-jar">
        <!--empty-->
    </target>
    <target name="-post-jar">
        <!--empty-->
    </target>
    <target name="-pre-test">
        <!--empty-->
    </target>
    <target name="-post-test">
        <!--empty-->
    </target>
    <target name="-pre-release">
        <!--empty-->
    </target>
    <target name="-post-release">
        <!--empty-->
    </target>
    <target name="-pre-publish">
        <!--empty-->
    </target>
    <target name="-post-publish">
        <!--empty-->
    </target>
    <target name="-post-clean">
        <!--empty-->
    </target>
    <!--
    utility task
    -->

    <!--
    initial section
    -->

    <!--
    checking section
    -->
    <target name="-check-project-git-version" depends="-do-init" if="exist.git" unless="project.version">
        <exec executable="git"
              outputproperty="git.version.output"
              resultproperty="git.version.result"
              failonerror="false">
            <arg value="describe"/>
            <arg value="--tags"/>
        </exec>
        <cc:if>
            <equals arg1="${git.version.result}" arg2="0"/>
            <cc:then>
                <property name="project.version" value="${git.version.output}"/>
            </cc:then>
        </cc:if>
    </target>
    <target name="-check-project-snapshot-version" unless="project.version">
        <tstamp>
            <format property="stamp" pattern="yyyyMMdd"/>
        </tstamp>
        <property name="project.version" value="snapshot-${stamp}"/>
    </target>
    <target name="-check-project-version" depends="-check-project-git-version,-check-project-snapshot-version"/>
    <target name="-check-jar-file" depends="-check-project-version" unless="jar.file">
        <property name="jar.file" value="${project.name}-${project.version}.jar"/>
    </target>
    <target name="-init-check" depends="-check-jar-file"/>
    <target name="init" depends="-pre-init,-do-init,-init-check,-post-init"/>
    <target name="show-git-version" depends="-check-project-git-version">
        <cc:if>
            <equals arg1="${git.version.result}" arg2="0"/>
            <cc:then>
                <echo message="git.version=${git.version.output}"/>
            </cc:then>
            <cc:else>
                <echo message="no git setup"/>
            </cc:else>
        </cc:if>
    </target>
    <target name="show-version" depends="-check-project-version">
        <echo message="project.version=${project.version}"/>
    </target>
    <target name="show-jar-name" depends="-check-jar-file">
        <echo message="jar.file=${jar.file}"/>
    </target>
    <!--
    compile section
    -->
    <target name="-def-macro-javac" depends="init,-init-classpath">
        <macrodef name="javac-macro">
            <attribute name="srcdir" default="${src.dir}"/>
            <attribute name="destdir" default="${build.classes.dir}"/>
            <attribute name="classpath" default="${real.test.classpath}"/>
            <attribute name="includes" default="${src.include}"/>
            <attribute name="excludes" default="${src.exclude}"/>
            <element name="customize" optional="true"/>
            <sequential>
                <javac classpath="@{classpath}"
                       srcdir="@{srcdir}"
                       sourcepath="${basedir}/@{srcdir}"
                       destdir="@{destdir}"
                       includes="@{includes}"
                       excludes="@{excludes}"
                       source="${javac.source}"
                       target="${javac.target}"
                       includeantruntime="no"
                       includejavaruntime="no"
                       debug="${javac.debug}"
                       fork="true"
                       listfiles="true">
                    <compilerarg line="${javac.jvmargs}"/>
                    <customize/>
                </javac>
            </sequential>
        </macrodef>
    </target>
    <target name="-init-compile">
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build.classes.dir}"/>
    </target>
    <target name="-do-compile" depends="-def-macro-javac,-init-compile">
        <javac-macro/>
    </target>
    <target name="-do-resource" if="exist.res">
        <mkdir dir="${build.classes.dir}/${res.dir}"/>
        <copy todir="${build.classes.dir}/${res.dir}">
            <fileset dir="${res.dir}" excludes="META-INF/"/>
        </copy>
    </target>
    <target name="-do-compile-single" depends="-def-macro-javac,-init-compile">
        <fail unless="single.file">Must set single.file</fail>
        <javac-macro includes="${single.file}"/>
    </target>

    <target name="compile" depends="init,-pre-compile,-do-compile,-do-resource,-post-compile"/>
    <target name="compile-single" depends="init,-pre-compile,-do-compile-single,-post-compile"/>
    <!--
    jar section
    -->
    <target name="-init-jar" depends="init,-def-exist">
        <mkdir dir="${build.jar.dir}"/>
        <exist-macro property="exist.manifest.file" path="${manifest.file}" type="file"/>
        <exist-macro property="exist.splash.file" path="${splash.image}" type="file"/>
        <property name="jar.manifest.file" value="${build.dir}/MANIFEST.MF"/>
    </target>
    <target name="-create-manifest" depends="init,-init-jar" unless="exist.manifest.file">
        <touch file="${jar.manifest.file}"/>
    </target>
    <target name="-copy-manifest" depends="init,-init-jar" if="exist.manifest.file">
        <copy file="manifest.file" tofile="${jar.manifest.file}"/>
    </target>
    <target name="-init-manifest" depends="init,-create-manifest,-copy-manifest"/>
    <target name="-do-manifest-main-class" depends="-init-manifest" if="main.class">
        <manifest file="${jar.manifest.file}" mode="update">
            <attribute name="Main-Class" value="${main.class}"/>
        </manifest>
    </target>
    <target name="-do-manifest-classpath" depends="-init-classpath,-init-manifest" if="jar.lib.copy">
        <cc:propertyregex property="jar.classpath" input="" regexp=".*" replace="\0" override="true"/>
        <cc:if>
            <equals arg1="${jar.lib.dir}" arg2=""/>
            <cc:then>
                <cc:for list="${real.runtime.classpath}" param="cp" delimiter=":">
                    <sequential>
                        <copy file="@{cp}" todir="${build.jar.dir}"/>
                        <cc:propertyregex property="tmp.classpath" input="@{cp}"
                                          regexp=".*/([^/]*)" replace="\1" override="true"/>
                        <cp-join classpath="jar.classpath" append="lib/${tmp.classpath}" split=" "/>
                    </sequential>
                </cc:for>
                <manifest file="${jar.manifest.file}" mode="update">
                    <attribute name="Class-Path" value="${jar.classpath}"/>
                </manifest>
            </cc:then>
            <cc:else>
                <mkdir dir="${build.jar.dir}/${jar.lib.dir}"/>
                <cc:for list="${real.runtime.classpath}" param="cp" delimiter=":">
                    <sequential>
                        <copy file="@{cp}" todir="${build.jar.dir}/${jar.lib.dir}"/>
                        <cc:propertyregex property="tmp.classpath" input="@{cp}"
                                          regexp=".*/([^/]*)" replace="\1" override="true"/>
                        <cp-join classpath="jar.classpath" append="lib/${tmp.classpath}" split=" "/>
                    </sequential>
                </cc:for>
                <manifest file="${jar.manifest.file}" mode="update">
                    <attribute name="Class-Path" value="${jar.classpath}"/>
                </manifest>
            </cc:else>
        </cc:if>
    </target>
    <target name="-do-manifest-splash" depends="init,-init-jar,-init-manifest" if="exist.splash.image">
        <basename file="${splash.image}" property="splash.image.basename"/>
        <mkdir dir="${build.meta.dir}"/>
        <copy failonerror="false" file="${splash.image}" todir="${build.meta.dir}"/>
        <manifest file="${jar.manifest.file}" mode="update">
            <attribute name="SplashScreen-Image" value="META-INF/${splash.image.basename}"/>
        </manifest>
    </target>
    <target name="-do-manifest" depends="-do-manifest-main-class,-do-manifest-classpath,-do-manifest-splash"/>
    <target name="-do-meta" depends="-init-jar">
        <cc:if>
            <available file="${res.dir}/META-INF" type="dir"/>
            <cc:then>
                <mkdir dir="${build.meta.dir}"/>
                <copy todir="${build.meta.dir}">
                    <fileset dir="${res.dir}/META-INF"/>
                </copy>
            </cc:then>
        </cc:if>
    </target>
    <target name="-do-readme" if="exist.readme.file">
        <copy file="${readme.file}" todir="${build.jar.dir}"/>
    </target>
    <target name="-do-jar" depends="-do-manifest,-do-meta">
        <cc:if>
            <available file="${build.meta.dir}" type="dir"/>
            <cc:then>
                <jar destfile="${build.jar.dir}/${jar.file}"
                     manifest="${jar.manifest.file}">
                    <metainf dir="${build.meta.dir}"/>
                    <fileset dir="${build.classes.dir}"/>
                </jar>
            </cc:then>
            <cc:else>
                <jar destfile="${build.jar.dir}/${jar.file}"
                     manifest="${jar.manifest.file}">
                    <fileset dir="${build.classes.dir}"/>
                </jar>
            </cc:else>
        </cc:if>
    </target>
    <target name="jar" depends="init,compile,-pre-jar,-init-jar,-do-jar,-post-jar"/>
    <!--
    javadoc section
   -->
    <target name="javadoc" depends="init,-init-classpath">
        <mkdir dir="${build.javadoc.dir}"/>
        <javadoc destdir="${build.javadoc.dir}"
                 author="author"
                 version="version"
                 charset="UTF-8"
                 noindex="false"
                 nonavbar="false"
                 notree="false"
                 private="false"
                 splitindex="false"
                 windowtitle="${project.name} API"
                 failonerror="true">
            <classpath path="${real.compile.classpath}"/>
            <fileset dir="${src.dir}" includes="${src.include}" excludes="${src.exclude}"/>
        </javadoc>
    </target>
    <!--
    run section
    -->
    <target name="-check-run-config" depends="-def-exist">
        <exist-macro property="exist.run.config" path="${run.config}" type="file"/>
    </target>
    <target name="-run-config" depends="-check-run-config" if="run.config">
        <fail unless="exist.run.config">run.config not found or not set</fail>
        <property file="${run.config}"/>
    </target>
    <target name="run" depends="-run-config,init,-init-classpath,compile">
        <fail unless="main.class">Must set main.class</fail>
        <property name="classpath" value=""/>
        <property name="java.jvmargs" value=""/>
        <property name="program.args" value=""/>
        <java classname="${main.class}" fork="true" failonerror="true">
            <classpath path="${real.runtime.classpath}"/>
            <classpath path="${build.classes.dir}"/>
            <classpath path="${classpath}"/>
            <jvmarg line="${java.jvmargs}"/>
            <arg line="${program.args}"/>
        </java>
    </target>
    <target name="run-test" depends="-run-config,init,-init-classpath,compile,compile-test">
        <fail unless="main.class">Must set main.class</fail>
        <property name="classpath" value=""/>
        <property name="java.jvmargs" value=""/>
        <property name="program.args" value=""/>
        <java classname="${main.class}" fork="true" failonerror="true">
            <classpath path="${real.test.classpath}"/>
            <classpath path="${build.classes.dir}"/>
            <classpath path="${build.test.dir}"/>
            <classpath path="${classpath}"/>
            <jvmarg line="${java.jvmargs}"/>
            <arg line="${program.args}"/>
        </java>
    </target>
    <target name="run-jar" depends="-run-config,init,compile,jar">
        <property name="classpath" value=""/>
        <property name="java.jvmargs" value=""/>
        <property name="program.args" value=""/>
        <java jar="${build.jar.dir}/${jar.file}" fork="true" failonerror="true">
            <classpath path="${classpath}"/>
            <jvmarg line="${java.jvmargs}"/>
            <arg line="${program.args}"/>
        </java>
    </target>
    <target name="run-single" depends="init,-init-classpath,compile">
        <fail unless="main.class">Must set main.class</fail>
        <java classname="${main.class}" fork="true" failonerror="true">
            <classpath path="${real.runtime.classpath}"/>
            <classpath path="${build.classes.dir}"/>
            <jvmarg line="${java.jvmargs}"/>
        </java>
    </target>
    <!--
    test section
    -->
    <target name="-def-macro-test" depends="init,-init-classpath">
        <macrodef name="test-marco">
            <element name="testcase" implicit="true"/>
            <sequential>
                <mkdir dir="${test.result.dir}"/>
                <junit tempdir="${test.result.dir}"
                       printsummary="withOutAndErr"
                       haltonfailure="false"
                       haltonerror="false"
                       fork="true">
                    <classpath path="${build.classes.dir}"/>
                    <classpath path="${build.test.dir}"/>
                    <classpath path="${real.test.classpath}"/>
                    <formatter type="brief"/>
                    <jvmarg line="${test.jvmargs}"/>
                    <testcase/>
                </junit>
            </sequential>
        </macrodef>
    </target>
    <target name="-do-compile-test" depends="init,-init-classpath,-def-macro-javac" if="exist.test">
        <mkdir dir="${build.test.dir}"/>
        <javac-macro classpath="${build.classes.dir}:${real.test.classpath}"
                     srcdir="${test.dir}"
                     destdir="${build.test.dir}"/>
    </target>
    <target name="-do-test" depends="-def-macro-test" if="exist.test">
        <property name="test.jvmargs" value=""/>
        <delete dir="${test.result.dir}" failonerror="false"/>
        <test-marco>
            <batchtest todir="${test.result.dir}">
                <fileset dir="${test.dir}"/>
            </batchtest>
        </test-marco>
    </target>
    <target name="-do-test-check-class">
        <cc:if>
            <and>
                <not>
                    <isset property="test.class"/>
                </not>
                <isset property="single.file"/>
            </and>
            <cc:then>
                <cc:propertyregex property="test.class" input="${single.file}"
                                  regexp="${test.dir}/(.+)\.java" select="\1"/>
                <cc:propertyregex property="test.class" input="${test.class}"
                                  regexp="/" replace="." override="true"/>
            </cc:then>
        </cc:if>
        <fail unless="test.class">Must set test.class or single.file</fail>
    </target>
    <target name="-do-test-class" depends="-do-test-check-class,-def-macro-test">
        <fail unless="exist.test">Test file does not exist</fail>
        <property name="test.jvmargs" value=""/>
        <test-marco>
            <test name="${test.class}"
                  todir="${test.result.dir}"/>
        </test-marco>
    </target>
    <target name="-do-test-method" depends="-do-test-check-class,-def-macro-test">
        <fail unless="exist.test">Test file does not exist</fail>
        <fail unless="test.method">Must set single.method</fail>
        <property name="test.jvmargs" value=""/>
        <test-marco>
            <test name="${test.class}"
                  methods="${test.method}"
                  todir="${test.result.dir}"/>
        </test-marco>
    </target>
    <target name="compile-test" depends="init,compile,-do-compile-test"/>
    <target name="test" depends="init,compile,-do-compile-test,-pre-test,-do-test,-post-test"/>
    <target name="test-class"
            depends="init,compile,-do-compile-test,-pre-test,-do-test-class,-post-test"/>
    <target name="test-method"
            depends="init,compile,-do-compile-test,-pre-test,-do-test-method,-post-test"/>
    <!--
    code coverage test section
    -->
    <target name="run-coverage" depends="init,-init-classpath,compile">
        <fail unless="main.class">Must set main.class</fail>
        <jacoco:coverage>
            <java classpath="${real.runtime.classpath}:${build.classes.dir}"
                  classname="${main.class}"
                  fork="true">
            </java>
        </jacoco:coverage>
    </target>
    <target name="-do-coverage-test" depends="-do-test-check-class,init,-init-classpath,compile,compile-test">
        <mkdir dir="${coverage.result.dir}"/>
        <jacoco:coverage destfile="${coverage.result.dir}/jacoco.exec">
            <junit fork="true"
                   forkmode="once">
                <test name="${test.class}"/>
                <classpath path="${real.test.classpath}:${build.classes.dir}:${build.test.dir}"/>
            </junit>
        </jacoco:coverage>
    </target>
    <target name="-do-coverage-report">
        <mkdir dir="${coverage.report.dir}"/>
        <jacoco:report>
            <executiondata>
                <file file="${coverage.result.dir}/jacoco.exec"/>
            </executiondata>
            <structure name="Project">
                <classfiles>
                    <fileset dir="${build.classes.dir}"/>
                </classfiles>
                <sourcefiles encoding="UTF-8">
                    <fileset dir="${src.dir}"/>
                </sourcefiles>
            </structure>
            <html destdir="${coverage.report.dir}"/>
        </jacoco:report>
    </target>
    <target name="test-coverage"
            depends="init,compile,-do-compile-test,-pre-test,-do-coverage-test,-post-test,-do-coverage-report"/>
    <!--
    release section
    -->
    <target name="-init-release" depends="init,clean,compile,test,jar,-pre-release">
        <mkdir dir="${release.dir}"/>
    </target>
    <target name="-do-release-bin" depends="-init-release">
        <zip destfile="${release.dir}/${project.name}-bin.zip">
            <fileset dir="${build.jar.dir}">
                <include name="**/*.jar"/>
                <include name="${jar.lib.dir}/**/*.jar"/>
            </fileset>
            <fileset dir=".">
                <include name="${readme.file}"/>
            </fileset>
        </zip>
    </target>
    <target name="-do-release-src" depends="-init-release" if="release.src">
        <zip destfile="${release.dir}/${project.name}-source.zip">
            <fileset dir=".">
                <include name="${src.dir}/**/*"/>
                <include name="${res.dir}/**/*"/>
                <include name="${readme.file}"/>
                <include name="build.xml"/>
                <include name="build.properties"/>
                <include name="ivy.xml"/>
            </fileset>
        </zip>
    </target>
    <target name="-do-release-javadoc" depends="-init-release,javadoc" if="release.javadoc">
        <zip destfile="${release.dir}/${project.name}-javadoc.zip">
            <fileset dir="${build.javadoc.dir}"/>
        </zip>
    </target>
    <target name="release-bin" depends="-init-release,-do-release-bin,-post-release"/>
    <target name="release-src" depends="-init-release,-do-release-src,-post-release"/>
    <target name="release-javadoc" depends="-init-release,-do-release-javadoc,-post-release"/>
    <target name="release" depends="-init-release,-do-release-bin,-do-release-src,-do-release-javadoc,-post-release"/>
    <!--
    publish section
    -->
    <target name="-init-publish" depends="init,clean,compile,test,jar">
        <ivy:resolve/>
    </target>
    <target name="-do-publish">
        <copy file="${build.jar.dir}/${jar.file}" tofile="${release.dir}/${project.name}.jar"/>
        <ivy:publish resolver="local"
                     pubrevision="${project.version}"
                     status="release"
                     overwrite="true"
                     update="true"
                     forcedeliver="true">
            <ivy:artifacts pattern="${release.dir}/[artifact].[ext]"/>
            <ivy:artifacts pattern="${release.dir}/[artifact]-[type].[ext]"/>
        </ivy:publish>
        <echo message="project ${ant.project.name} released with version ${project.version}"/>
    </target>
    <target name="publish" depends="-init-publish,release,-pre-publish,-do-publish,-post-publish"/>
    <!--
    clean section
    -->
    <target name="-do-clean">
        <delete dir="${build.dir}"/>
    </target>
    <target name="clean" depends="init,-do-clean,-post-clean"/>
    <target name="clean-all" depends="init, clean">
        <delete dir="${lib.dir}"/>
        <delete dir="${release.dir}"/>
    </target>
</project>
