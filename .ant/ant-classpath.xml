<?xml version="1.0" encoding="UTF-8"?>
<project>
    <target name="-def-macro-path-append">
        <macrodef name="path-append">
            <attribute name="property"/>
            <attribute name="path"/>
            <attribute name="split" default=":"/>
            <sequential>
                <script language="javascript"> <![CDATA[
                    var p = self.getProject();
                    var cp = p.getProperty("@{property}");
                    if (cp == null || cp.length == 0) {
                        if ("@{path}".length != 0) {
                            p.setProperty("@{property}", "@{path}");
                        } else {
                            p.setProperty("@{property}", '');
                        }
                    } else if ("@{path}".length != 0) {
                        p.setProperty("@{property}", cp + "@{split}@{path}");
                    }
                ]]> </script>
            </sequential>
        </macrodef>
    </target>
    <target name="-def-macro-list-path">
        <macrodef name="list-path">
            <attribute name="property"/>
            <attribute name="dir"/>
            <attribute name="split" default=":"/>
            <attribute name="include" default="**/*"/>
            <sequential>
                <script language="javascript"><![CDATA[
                    var root = java.nio.file.Paths.get("@{dir}");
                    var pm = java.nio.file.FileSystems.getDefault().getPathMatcher("glob:@{include}");
                    var FVR = java.nio.file.FileVisitResult;
                    var ls = new java.util.ArrayList();
                    java.nio.file.Files.walkFileTree(root, new java.nio.file.FileVisitor() {
                        preVisitDirectory: function(file, e) { return FVR.CONTINUE;},
                        postVisitDirectory: function(file, attrs) { return FVR.CONTINUE;},
                        visitFile: function(file, attrs) {
                            if (pm.matches(file)) {
                                ls.add(file.toString());
                            }
                            return FVR.CONTINUE;
                        },
                        visitFileFailed: function(file, e) { return FVR.CONTINUE;}
                    });

                    self.getProject().setProperty("@{property}", java.lang.String.join("@{split}", ls));

                ]]> </script>
            </sequential>
        </macrodef>
    </target>
</project>