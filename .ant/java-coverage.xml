<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:jacoco="antlib:org.jacoco.ant">
    <!--
    check import
    -->
    <fail unless="define.java">should import 'build-java.xml'</fail>
    <!--
    global define
    -->
    <property name="define.coverage" value=""/>
    <!--
    initial section
    -->
    <property name="build.coverage.dir" value="${build.dir}/jacoco"/>
    <!--
    task
    -->
    <target name="-coverage-init">
        <mkdir dir="${build.coverage.dir}"/>
        <property name="coverage.result.file" value="${build.coverage.dir}/jacoco.exec"/>
        <property name="coverage.report.dir" value="${build.coverage.dir}/report"/>
    </target>
    <target name="-coverage-main" depends="-run-prepare,-coverage-init">
        <fail unless="main.class">Must set 'main.class'</fail>
        <property name="java.jvmargs" value=""/>
        <property name="program.args" value=""/>
        <jacoco:coverage destfile="${coverage.result.file}">
            <java classname="${main.class}"
                  fork="true"
                  failonerror="true">
                <classpath path="${real.runtime.classpath}"/>
                <classpath path="${build.classes.dir}"/>
                <jvmarg line="${java.jvmargs}"/>
                <arg line="${program.args}"/>
            </java>
        </jacoco:coverage>
    </target>
    <target name="-coverage-test" depends="-test-prepare,-coverage-init" if="exist.test">
        <jacoco:coverage destfile="${coverage.result.file}">
            <junit printsummary="withOutAndErr"
                   haltonfailure="true"
                   haltonerror="true"
                   fork="true">
                <batchtest todir="${test.result.dir}">
                    <fileset dir="${test.dir}"/>
                </batchtest>
            </junit>
        </jacoco:coverage>
    </target>
    <target name="-coverage-test-class" depends="-test-prepare,-coverage-init" if="exist.test">
        <fail unless="class">Must set 'class'</fail>
        <jacoco:coverage destfile="${coverage.result.file}">
            <junit printsummary="withOutAndErr"
                   haltonfailure="true"
                   haltonerror="true"
                   fork="true">
                <test name="${class}" todir="${test.result.dir}"/>
            </junit>
        </jacoco:coverage>
    </target>
    <target name="-coverage-report" depends="-coverage-init">
        <available property="exist.coverage.result" file="${coverage.result.file}"/>
        <fail unless="exist.coverage.result">Coverage Result File doesn't exist</fail>
        <mkdir dir="${coverage.report.dir}"/>
        <jacoco:report>
            <executiondata>
                <file file="${coverage.result.file}"/>
            </executiondata>
            <structure name="Project">
                <classfiles>
                    <fileset dir="${build.classes.dir}"/>
                </classfiles>
                <sourcefiles encoding="UTF-8">
                    <fileset dir="${src.dir}"/>
                </sourcefiles>
            </structure>
            <html destdir="${coverage.report.dir}"/>
            <!--<xml destdir="${coverage.report.dir}"/>-->
            <!--<csv destdir="${coverage.report.dir}"/>-->
        </jacoco:report>
    </target>
    <target name="coverage" depends="-coverage-main,-post-run,-coverage-report"/>
    <target name="coverage-test" depends="-coverage-test,-post-test,-coverage-report"/>
    <target name="coverage-test-class" depends="-coverage-test-class,-post-test,-coverage-report"/>
</project>