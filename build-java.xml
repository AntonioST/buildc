<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:ivy="antlib:org.apache.ivy.ant"
         xmlns:if="ant:if"
         xmlns:unless="ant:unless">

    <!--===============
    Directory Structure
    ===================
    .
    ├ build.xml
    ├ ivy.xml
    ├ src           ${src.dir}
    ├ res           ${res.dir}
    │ └ META-INF
    ├ lib           ${lib.dir}
    │ ├ default     ${lib.default.dir}
    │ ├ master      ${lib.master.dir}
    │ ├ compile     ${lib.compile.dir}
    │ └ runtime     ${lib.runtime.dir}
    └ build         ${build.dir}
      ├ src         ${build.src.dir}
      ├ classes     ${build.classes.dir}
      ├ jar         ${build.jar.dir}
      │ ├ ${jar.lib.dir}
      │ └ ${jar.file}
      └ META-INF    ${build.meta.dir}


    MANIFEST.MF     ${manifest.file}
    splash image    ${splash.file}
    README          ${readme.file}
                    ${jar.resource.fileset}
    ================-->

    <!--========
    default task
    ==========-->
    <target name="default" depends="init,compile,jar"/>

    <!--=========
    global define
    ==========-->
    <property name="define.java" value=""/>
    <property name="src.dir" value="src"/>
    <property name="build.dir" value="build"/>
    <property name="res.dir" value="res"/>
    <property name="lib.dir" value="lib"/>
    <property name="lib.default.dir" value="${lib.dir}/default"/>
    <property name="lib.master.dir" value="${lib.dir}/master"/>
    <property name="lib.compile.dir" value="${lib.dir}/compile"/>
    <property name="lib.runtime.dir" value="${lib.dir}/runtime"/>
    <available property="exist.ivy" file="ivy.xml" type="file"/>
    <available property="exist.lib" file="${lib.dir}" type="dir"/>

    <!--==
    import
    ===-->
    <import file="ant-git.xml"/>

    <!--====================
    custom extension section
    =====================-->
    <extension-point name="-pre-init"/>
    <extension-point name="-post-init"/>
    <extension-point name="-pre-compile"/>
    <extension-point name="-post-compile"/>
    <extension-point name="-pre-jar"/>
    <extension-point name="-post-jar"/>
    <extension-point name="-post-clean"/>
    <extension-point name="-post-clean-all"/>
    <extension-point name="-help-extend"/>
    <extension-point name="-echo-classpath-extend"/>

    <!--=================
    help document section
    ===================-->
    <target name="-help-general" depends="init">
        <echo>Usage : ant TASK [-DKEY=VALUE...]</echo>
        <echo/>
        <echo>task are listed below for each task module</echo>
    </target>
    <target name="-help-build-java" depends="init">
        <echo>help           : list task and help document</echo>
        <echo>init           : initialize task</echo>
        <echo>retrieve       : retrieve lost library at ${lib.dir}</echo>
        <echo>clean-retrieve : redo retrieve library at ${lib.dir}</echo>
        <echo>echo-classpath : echo classpath</echo>
        <echo/>
        <echo>compile        : compile source file under ${src.dir}/ to ${build.dir}/</echo>
        <echo>compile-class  : compile source file, use property 'class' to set included files</echo>
        <echo>jar            : generate jar file</echo>
        <echo/>
        <echo>clean          : clean</echo>
        <echo>clean-all      : clean</echo>
    </target>
    <target name="help" depends="-help-general,-help-build-java,-help-extend"/>

    <!--================
    Utility Macro define
    =================-->
    <macrodef name="to-file-path">
        <!-- translate pattern
        package.class   -> package/class.java
        package.class.  -> package/class/*
        -->
        <attribute name="property"/>
        <attribute name="value"/>
        <sequential>
            <script language="javascript"><![CDATA[
            var p = self.getProject();
            var v = '@{value}';
            if(v.matches('\\w+(\\.\\w+)*')) {
                // v is class path not file path
                p.setProperty('@{property}', v.replaceAll('\\.', '/') + '.java');
            } else if(v.matches('\\w+(\\.\\w+)*\\.')) {
                p.setProperty('@{property}', v.replaceAll('\\.', '/') + '/*');
            } else {
                p.setProperty('@{property}', v);
            }
        ]]></script>
        </sequential>
    </macrodef>

    <!--===========
    initial section
    ============-->
    <target name="-init-properties" depends="-pre-init">
        <property file="${basedir}/build.properties"/>
    </target>
    <target name="-init-version" depends="-init-properties" unless="project.version">
        <available property="exist.git" file=".git" type="dir"/>
        <git-describe property="project.version" unless:set="project.version" if:set="exist.git"/>
        <tstamp unless:set="project.version">
            <format property="time.stamp" pattern="yyyyMMdd"/>
        </tstamp>
        <property name="project.version" value="snapshot-${time.stamp}" unless:set="project.version"/>
    </target>
    <target name="-init" depends="-init-properties,-init-version">
        <property name="project.name" value="${ant.project.name}"/>
        <property name="jar.file" value="${project.name}-${project.version}.jar"/>
        <!--default directory-->
        <property name="build.src.dir" value="${build.dir}/${src.dir}"/>
        <property name="build.classes.dir" value="${build.dir}/classes"/>
        <property name="build.jar.dir" value="${build.dir}/jar"/>
        <property name="build.meta.dir" value="${build.dir}/META-INF"/>
        <property name="jar.lib.dir" value="lib"/>
        <!--default value-->
        <property name="javac.source" value="1.8"/>
        <property name="javac.target" value="1.8"/>
        <property name="javac.debug" value="true"/>
        <property name="javac.verbose" value="false"/>
        <property name="javac.list-file" value="true"/>
        <property name="javac.jvmargs" value=""/>
        <property name="src.include" value="**/*.java"/>
        <property name="src.exclude" value=""/>
        <property name="jar.lib.copy" value="true"/>
        <!--verbose-->
        <echo message="[source] include=${src.include}" level="verbose"/>
        <echo message="[source] exclude=${src.exclude}" level="verbose"/>
        <echo message="[javac] source=${javac.source}" level="verbose"/>
        <echo message="[javac] target=${javac.target}" level="verbose"/>
        <echo message="[javac] debug=${javac.debug}" level="verbose"/>
        <echo message="[javac] verbose=${javac.verbose}" level="verbose"/>
        <echo message="[jar] lib copy=${jar.lib.copy}" level="verbose"/>
    </target>
    <target name="init-classpath" depends="-init,-try-retrieve">
        <!--<available property="exist.lib.default.dir" file="${lib.default.dir}" type="dir"/>-->
        <available property="exist.lib.compile.dir" file="${lib.compile.dir}" type="dir"/>
        <available property="exist.lib.runtime.dir" file="${lib.runtime.dir}" type="dir"/>
        <!--<path id="real.default.classpath">-->
            <!--<pathelement path="${classpath}" if:set="classpath"/>-->
            <!--<pathelement path="${default.classpath}" if:set="default.classpath"/>-->
            <!--<pathelement path="${master.classpath}" if:set="master.classpath"/>-->
            <!--<pathelement path="${compile.classpath}" if:set="compile.classpath"/>-->
            <!--<pathelement path="${runtime.classpath}" if:set="runtime.classpath"/>-->
            <!--<fileset dir="${lib.default.dir}" if:set="exist.lib.default.dir">-->
                <!--<include name="*.jar"/>-->
            <!--</fileset>-->
        <!--</path>-->
        <path id="real.compile.classpath">
            <pathelement path="${classpath}" if:set="classpath"/>
            <pathelement path="${master.classpath}" if:set="master.classpath"/>
            <pathelement path="${compile.classpath}" if:set="compile.classpath"/>
            <fileset dir="${lib.compile.dir}" if:set="exist.lib.compile.dir">
                <include name="*.jar"/>
            </fileset>
        </path>
        <path id="real.runtime.classpath">
            <pathelement path="${classpath}" if:set="classpath"/>
            <pathelement path="${master.classpath}" if:set="master.classpath"/>
            <pathelement path="${compile.classpath}" if:set="compile.classpath"/>
            <pathelement path="${runtime.classpath}" if:set="runtime.classpath"/>
            <fileset dir="${lib.runtime.dir}" if:set="exist.lib.runtime.dir">
                <include name="*.jar"/>
            </fileset>
        </path>
    </target>
    <target name="init" depends="-init,-post-init" description="init project"/>
    <target name="-echo-classpath" depends="init-classpath">
        <pathconvert property="temp.real.compile.classpath" refid="real.compile.classpath"/>
        <pathconvert property="temp.real.runtime.classpath" refid="real.runtime.classpath"/>
        <echo>real.compile.classpath=${temp.real.compile.classpath}</echo>
        <echo>real.runtime.classpath=${temp.real.runtime.classpath}</echo>
    </target>
    <target name="echo-classpath" depends="init-classpath,-echo-classpath,-echo-classpath-extend"/>


    <!--===================
    task (retrieve) section
    ====================-->
    <target name="-try-retrieve" if="exist.ivy" unless="exist.lib">
        <ivy:retrieve pattern="${lib.dir}/[conf]/[artifact].[ext]"/>
    </target>
    <target name="retrieve" if="exist.ivy">
        <ivy:retrieve pattern="${lib.dir}/[conf]/[artifact].[ext]"/>
    </target>
    <target name="clean-retrieve" if="exist.ivy">
        <delete dir="${lib.dir}"/>
        <ivy:retrieve pattern="${lib.dir}/[conf]/[artifact].[ext]"/>
    </target>

    <!--===========
    compile section
    ============-->
    <target name="-def-macro-javac">
        <macrodef name="macro-javac">
            <attribute name="src"/>
            <attribute name="dest"/>
            <attribute name="includes" default="${src.include}"/>
            <attribute name="excludes" default="${src.exclude}"/>
            <element name="customize" implicit="true" optional="true"/>
            <sequential>
                <javac srcdir="@{src}"
                       destdir="@{dest}"
                       includes="@{includes}"
                       excludes="@{excludes}"
                       source="${javac.source}"
                       target="${javac.target}"
                       debug="${javac.debug}"
                       verbose="${javac.verbose}"
                       listfiles="${javac.list-file}"
                       includeantruntime="no"
                       includejavaruntime="no"
                       fork="true"
                       failonerror="true">
                    <customize/>
                </javac>
            </sequential>
        </macrodef>
    </target>
    <target name="-compile-init" depends="init,init-classpath,-def-macro-javac">
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build.classes.dir}"/>
    </target>
    <target name="-compile-prepare" depends="init,-compile-init,-pre-compile"/>
    <target name="-compile" depends="-compile-prepare">
        <fail if="compile.source">property 'compile.source' has need defined</fail>
        <available property="exist.build.src" file="${build.src.dir}" type="dir"/>
        <property name="compile.source" value="${src.dir}:${build.src.dir}" if:set="exist.build.src"/>
        <property name="compile.source" value="${src.dir}" unless:set="exist.build.src"/>
        <macro-javac src="${compile.source}"
                     dest="${build.classes.dir}">
            <classpath refid="real.compile.classpath"/>
        </macro-javac>
        <!-- copy un-java-source file-->
        <copy todir="${build.classes.dir}">
            <fileset dir="${src.dir}">
                <exclude name="${src.include}"/>
            </fileset>
        </copy>
    </target>
    <target name="-compile-class-clean">
        <fail unless="class">Must set 'class'</fail>
        <script language="javascript"><![CDATA[
            var p = self.getProject();
            var j = p.getProperty('class');
            if (j.matches('\\w+(\\.\\w+)*')) {
                var c = j.replaceAll('\\.', '/') + '.class';
            } else if (j.matches('\\w+(\\.\\w+)*\\.')) {
                var c = j.replaceAll('\\.', '/') + '/*';
            } else if (j.endsWith('.java')) {
                var c = j.replaceAll('.java$', '.class');
            } else {
                var c = j;
            }
            p.setProperty('tmp.compile.class.clean', c);
        ]]></script>
        <delete>
            <fileset dir="${build.classes.dir}">
                <include name="${tmp.compile.class.clean}"/>
            </fileset>
        </delete>
    </target>
    <target name="-compile-class" depends="-compile-prepare,-compile-class-clean">
        <fail unless="class">Must set 'class'</fail>
        <to-file-path property="tmp.compile.class" value="${class}"/>
        <macro-javac src="${src.dir}"
                     dest="${build.classes.dir}"
                     includes="${tmp.compile.class}">
            <classpath refid="real.compile.classpath"/>
        </macro-javac>
    </target>
    <target name="compile" depends="-compile,-post-compile"/>
    <target name="compile-class" depends="-compile-class,-post-compile"/>

    <!--=======
    jar section
    ========-->
    <target name="-jar-init" depends="init,compile">
        <mkdir dir="${build.jar.dir}"/>
        <mkdir dir="${build.meta.dir}"/>
        <delete dir="${build.jar.dir}">
            <include name="*.jar"/>
        </delete>
        <available property="exist.manifest.file" file="${manifest.file}" if:set="manifest.file"/>
        <available property="exist.splash.file" file="${splash.file}" if:set="splash.file"/>
        <available property="exist.readme.file" file="${readme.file}" if:set="readme.file"/>
        <available property="exist.meta.dir" file="${res.dir}/META-INF" type="dir"/>
        <property name="jar.manifest.file" value="${build.dir}/MANIFEST.MF"/>
        <condition property="jar.lib.copy.test">
            <equals arg1="${jar.lib.copy}" arg2="true" trim="true"/>
        </condition>
        <condition property="jar.lib.dir.empty">
            <or>
                <equals arg1="${jar.lib.dir}" arg2="" trim="true"/>
                <equals arg1="${jar.lib.dir}" arg2="." trim="true"/>
            </or>
        </condition>
    </target>
    <target name="-manifest-init" depends="-jar-init">
        <touch file="${jar.manifest.file}" unless:set="exist.manifest.file"/>
        <copy file="${manifest.file}" tofile="${jar.manifest.file}" if:set="exist.manifest.file"/>
    </target>
    <target name="-manifest-main-class" depends="-manifest-init" if="main.class">
        <manifest file="${jar.manifest.file}" mode="update">
            <attribute name="Main-Class" value="${main.class}"/>
        </manifest>
    </target>
    <target name="-manifest-classpath" depends="init-classpath,-manifest-init" if="jar.lib.copy.test">
        <mkdir dir="${build.jar.dir}/${jar.lib.dir}"/>
        <copy todir="${build.jar.dir}/${jar.lib.dir}" flatten="true">
            <path refid="real.runtime.classpath"/>
        </copy>
        <fileset id="jar.classpath.fileset" dir="${build.jar.dir}" unless:set="jar.lib.dir.empty">
            <include name="${jar.lib.dir}/*"/>
        </fileset>
        <pathconvert property="jar.classpath" pathsep=" " refid="jar.classpath.fileset" unless:set="jar.lib.dir.empty">
            <mapper type="regexp" from=".*${build.jar.dir}/(.*\.jar)" to="\1"/>
        </pathconvert>
        <pathconvert property="jar.classpath" pathsep=" " refid="real.runtime.classpath" if:set="jar.lib.dir.empty">
            <mapper type="regexp" from=".*/(.*\.jar)" to="\1"/>
        </pathconvert>
        <manifest file="${jar.manifest.file}" mode="update">
            <attribute name="Class-Path" value="${jar.classpath}"/>
        </manifest>
    </target>
    <target name="-manifest-splash" depends="-manifest-init" if="exist.splash.image">
        <basename file="${splash.image}" property="splash.image.basename"/>
        <copy failonerror="false" file="${splash.image}" todir="${build.meta.dir}"/>
        <manifest file="${jar.manifest.file}" mode="update">
            <attribute name="SplashScreen-Image" value="META-INF/${splash.image.basename}"/>
        </manifest>
    </target>
    <target name="-manifest" depends="-manifest-init,-manifest-main-class,-manifest-classpath,-manifest-splash"/>
    <target name="-jar-meta" depends="-jar-init" if="exist.meta.dir">
        <copy todir="${build.meta.dir}">
            <fileset dir="${res.dir}/META-INF"/>
        </copy>
    </target>
    <target name="-jar-readme" depends="-jar-init" if="exist.readme.file">
        <copy file="${readme.file}" todir="${build.jar.dir}"/>
    </target>
    <target name="-jar-resource" depends="-jar-init" if="jar.resource.fileset">
        <copy todir="${build.jar.dir}/${res.dir}">
            <fileset refid="jar.resource.fileset"/>
        </copy>
    </target>
    <target name="-jar" depends="-jar-init,-manifest,-jar-meta,-jar-readme,-jar-resource,-pre-jar">
        <jar destfile="${build.jar.dir}/${jar.file}"
             manifest="${jar.manifest.file}">
            <metainf dir="${build.meta.dir}"/>
            <fileset dir="${build.classes.dir}"/>
        </jar>
    </target>
    <target name="jar" depends="-jar,-post-jar"/>

    <!--=========
    clean section
    ==========-->
    <target name="-clean" depends="init">
        <delete dir="${build.dir}"/>
    </target>
    <target name="-clean-all" depends="-clean">
        <delete dir="${lib.dir}"/>
    </target>
    <target name="clean" depends="-clean,-post-clean"/>
    <target name="clean-all" depends="-clean-all,-post-clean,-post-clean-all"/>
</project>
