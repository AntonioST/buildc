<?xml version="1.0" encoding="UTF-8"?>
<project>
    <target name="default" depends="init,compile,jar"/>
    <!--
    global property
    -->
    <property name="define.java" value=""/>
    <property name="src.dir" value="src"/>
    <property name="build.dir" value="build"/>
    <property name="res.dir" value="res"/>
    <property name="lib.dir" value="lib"/>
    <property name="lib.master.dir" value="${lib.dir}/master"/>
    <property name="lib.compile.dir" value="${lib.dir}/compile"/>
    <property name="lib.runtime.dir" value="${lib.dir}/runtime"/>
    <!--
    import
    -->
    <import file="ant-git.xml"/>
    <import file="ant-exist.xml"/>
    <import file="ant-classpath.xml"/>
    <!--
    custom section
    -->
    <extension-point name="-pre-init"/>
    <extension-point name="-post-init"/>
    <extension-point name="-pre-compile"/>
    <extension-point name="-post-compile"/>
    <extension-point name="-pre-jar"/>
    <extension-point name="-post-jar"/>
    <extension-point name="-post-clean"/>
    <extension-point name="-post-clean-all"/>
    <extension-point name="-help-extend"/>
    <!--
    help section
    -->
    <target name="-help-general" depends="init">
        <echo>Usage:</echo>
        <echo>  ant TASK [-DKEY=VALUE...]</echo>
        <echo></echo>
        <echo>task are listed below for each task module</echo>
    </target>
    <target name="-help-build-java" depends="init">
        <echo>init : initial task</echo>
        <echo>compile : compile source file under ${src.dir}/ to ${build.dir}/</echo>
        <echo>jar : generate jar file</echo>
        <echo>clean : clean</echo>
        <echo>clean-all : clean</echo>
    </target>
    <target name="help" depends="-help-general,-help-build-java,-help-extend"/>
    <!--
    initial section
    -->
    <target name="-init-properties" depends="-pre-init">
        <property file="${basedir}/build.properties"/>
    </target>
    <target name="-init-version" depends="-init-properties" if="exist.git" unless="project.version">
        <git-describe property="project.version"/>
    </target>
    <target name="-init" depends="-init-properties,-init-version">
        <property name="project.name" value="${ant.project.name}"/>
        <tstamp>
            <format property="time.stamp" pattern="yyyyMMdd"/>
        </tstamp>
        <property name="project.version" value="snapshot-${time.stamp}"/>
        <property name="jar.file" value="${project.name}-${project.version}.jar"/>
        <!--default directory-->
        <property name="build.classes.dir" value="${build.dir}/classes"/>
        <property name="build.javadoc.dir" value="${build.dir}/javadoc"/>
        <property name="build.jar.dir" value="${build.dir}/jar"/>
        <property name="build.meta.dir" value="${build.dir}/META-INF"/>
        <property name="jar.lib.dir" value="lib"/>
        <!--exist property-->
        <available property="exist.res" file="${res.dir}" type="dir"/>
        <!--default value-->
        <property name="javac.source" value="1.8"/>
        <property name="javac.target" value="1.8"/>
        <property name="javac.debug" value="true"/>
        <property name="javac.verbose" value="false"/>
        <property name="javac.list-file" value="true"/>
        <property name="javac.jvmargs" value=""/>
        <property name="src.include" value="**"/>
        <property name="src.exclude" value=""/>
        <property name="jar.lib.copy" value="true"/>
        <!--verbose-->
        <echo message="[source] include=${src.include}" level="verbose"/>
        <echo message="[source] exclude=${src.exclude}" level="verbose"/>
        <echo message="[javac] source=${javac.source}" level="verbose"/>
        <echo message="[javac] target=${javac.target}" level="verbose"/>
        <echo message="[javac] debug=${javac.debug}" level="verbose"/>
        <echo message="[javac] verbose=${javac.verbose}" level="verbose"/>
        <echo message="[jar] lib copy=${jar.lib.copy}" level="verbose"/>
        <echo message="[jar] res compress=${jar.res.compress}" level="verbose"/>
    </target>
    <target name="-init-classpath" depends="-init">
        <!--default classpath-->
        <property name="master.classpath" value=""/>
        <property name="compile.classpath" value=""/>
        <property name="runtime.classpath" value=""/>
        <list-path property="lib.compile.classpath" dir="${lib.compile.dir}"/>
        <list-path property="lib.runtime.classpath" dir="${lib.runtime.dir}"/>
        <path-append property="real.compile.classpath" path="${master.classpath}"/>
        <path-append property="real.compile.classpath" path="${compile.classpath}"/>
        <path-append property="real.compile.classpath" path="${lib.compile.classpath}"/>
        <path-append property="real.runtime.classpath" path="${master.classpath}"/>
        <path-append property="real.runtime.classpath" path="${runtime.classpath}"/>
        <path-append property="real.runtime.classpath" path="${lib.runtime.classpath}"/>
        <!--verbose-->
        <echo message="[classpath] real.compile.classpath=${real.compile.classpath}" level="verbose"/>
        <echo message="[classpath] real.runtime.classpath=${real.runtime.classpath}" level="verbose"/>
    </target>
    <target name="init" depends="-init,-post-init" description="init project"/>
    <!--
    compile section
    -->
    <target name="-def-macro-javac">
        <macrodef name="macro-javac">
            <attribute name="src"/>
            <attribute name="dest"/>
            <attribute name="includes" default="${src.include}"/>
            <attribute name="excludes" default="${src.exclude}"/>
            <element name="customize" implicit="true" optional="true"/>
            <sequential>
                <javac srcdir="@{src}"
                       destdir="@{dest}"
                       includes="@{includes}"
                       excludes="@{excludes}"
                       source="${javac.source}"
                       target="${javac.target}"
                       debug="${javac.debug}"
                       verbose="${javac.verbose}"
                       listfiles="${javac.list-file}"
                       includeantruntime="no"
                       includejavaruntime="no"
                       fork="true"
                       failonerror="true">
                    <customize/>
                </javac>
            </sequential>
        </macrodef>
    </target>
    <target name="-compile-init" depends="init,-init-classpath,-def-macro-javac">
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build.classes.dir}"/>
    </target>
    <target name="-compile-prepare" depends="init,-compile-init,-pre-compile"/>
    <target name="-compile" depends="-compile-prepare">
        <macro-javac src="${src.dir}"
                     dest="${build.classes.dir}">
            <classpath path="${real.compile.classpath}"/>
        </macro-javac>
    </target>
    <target name="-compile-class" depends="-compile-prepare">
        <fail unless="class">Must set 'class'</fail>
        <macro-javac src="${src.dir}"
                     dest="${build.classes.dir}"
                     includes="${class}">
            <classpath path="${real.compile.classpath}"/>
        </macro-javac>
    </target>
    <target name="compile" depends="-compile,-post-compile"/>
    <target name="compile-class" depends="-compile-class,-post-compile"/>
    <!--
    jar section
    -->
    <target name="-jar-init" depends="init,compile">
        <mkdir dir="${build.jar.dir}"/>
        <mkdir dir="${build.meta.dir}"/>
        <macro-exist property="exist.manifest.file" path="${manifest.file}" type="file"/>
        <macro-exist property="exist.splash.file" path="${splash.image}" type="file"/>
        <macro-exist property="exist.readme.file" path="${readme.file}" type="file"/>
        <macro-exist property="exist.meta.dir" path="${res.dir}/META-INF" type="dir"/>
        <property name="jar.manifest.file" value="${build.dir}/MANIFEST.MF"/>
    </target>
    <target name="-manifest-create" depends="-jar-init" unless="exist.manifest.file">
        <touch file="${jar.manifest.file}"/>
    </target>
    <target name="-manifest-copy" depends="-jar-init" if="exist.manifest.file">
        <copy file="manifest.file" tofile="${jar.manifest.file}"/>
    </target>
    <target name="-manifest-init" depends="-manifest-copy,-manifest-create"/>
    <target name="-manifest-main-class" depends="-manifest-init" if="main.class">
        <manifest file="${jar.manifest.file}" mode="update">
            <attribute name="Main-Class" value="${main.class}"/>
        </manifest>
    </target>
    <target name="-manifest-classpath" depends="-init-classpath,-manifest-init">
        <script language="javascript"><![CDATA[
            var p = self.getProject();
            var copy = p.getProperty('jar.lib.copy');
            if (copy != null && java.lang.Boolean.valueOf(copy)){
                var F = java.nio.file.Files;
                var P = java.nio.file.Paths;
                var ls = new java.util.ArrayList();
                var rt = P.get(p.getProperty('build.jar.dir'));
                var to = rt.resolve(P.get(p.getProperty('jar.lib.dir')));
                F.createDirectories(to);
                for each (var cp in p.getProperty('real.runtime.classpath').split(':')){
                    if (!cp.isEmpty()){
                        var f = P.get(cp);
                        var t = to.resolve(f.getFileName());
                        if (!F.exists(t)){
                            var echo = p.createTask('echo');
                            echo.setMessage('copy ' + f + ' -> ' + t);
                            echo.perform();
                            F.copy(f, t);
                        }
                        ls.add(rt.relativize(t).toString());
                    }
                }
                p.setProperty('jar.classpath', java.lang.String.join(' ', ls));
            }
        ]]></script>
        <manifest file="${jar.manifest.file}" mode="update">
            <attribute name="Class-Path" value="${jar.classpath}"/>
        </manifest>
    </target>
    <target name="-manifest-splash" depends="-manifest-init" if="exist.splash.image">
        <basename file="${splash.image}" property="splash.image.basename"/>
        <mkdir dir="${build.meta.dir}"/>
        <copy failonerror="false" file="${splash.image}" todir="${build.meta.dir}"/>
        <manifest file="${jar.manifest.file}" mode="update">
            <attribute name="SplashScreen-Image" value="META-INF/${splash.image.basename}"/>
        </manifest>
    </target>
    <target name="-manifest" depends="-manifest-init,-manifest-main-class,-manifest-classpath,-manifest-splash"/>
    <target name="-jar-meta" depends="-jar-init" if="exist.meta.dir">
        <copy todir="${build.meta.dir}">
            <fileset dir="${res.dir}/META-INF"/>
        </copy>
    </target>
    <target name="-jar-readme" depends="-jar-init" if="exist.readme.file">
        <copy file="${readme.file}" todir="${build.jar.dir}"/>
    </target>
    <target name="-jar-prepare" depends="-jar-init,-manifest,-jar-meta,-jar-readme,-pre-jar"/>
    <target name="-jar-with-res-fileset" depends="-jar-prepare" if="jar.resource.fileset">
        <jar destfile="${build.jar.dir}/${jar.file}"
             manifest="${jar.manifest.file}">
            <metainf dir="${build.meta.dir}"/>
            <fileset dir="${build.classes.dir}"/>
            <fileset refid="jar.resource.fileset"/>
        </jar>
    </target>
    <target name="-jar-without-res-fileset" depends="-jar-prepare" unless="jar.resource.fileset">
        <jar destfile="${build.jar.dir}/${jar.file}"
             manifest="${jar.manifest.file}">
            <metainf dir="${build.meta.dir}"/>
            <fileset dir="${build.classes.dir}"/>
        </jar>
    </target>
    <target name="jar" depends="-jar-with-res-fileset,-jar-without-res-fileset,-post-jar"/>
    <!--
    clean section
    -->
    <target name="-clean" depends="init">
        <delete dir="${build.dir}"/>
    </target>
    <target name="-clean-all" depends="-clean">
        <delete dir="${lib.dir}"/>
    </target>
    <target name="clean" depends="-clean,-post-clean"/>
    <target name="clean-all" depends="-clean-all,-post-clean,-post-clean-all"/>
</project>