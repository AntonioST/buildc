<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:ivy="antlib:org.apache.ivy.ant"
         xmlns:if="ant:if"
         xmlns:unless="ant:unless">
    <!--===============
    Directory Structure
    ===================
    .
    ├ build.xml
    ├ ivy.xml
    ├ src           ${src.dir}
    ├ res           ${res.dir}
    │ └ META-INF
    ├ lib           ${lib.dir}
    │ ├ default     ${lib.default.dir}
    │ ├ master      ${lib.master.dir}
    │ ├ compile     ${lib.compile.dir}
    │ └ runtime     ${lib.runtime.dir}
    └ build         ${build.dir}

    ================-->

    <!--========
    default task
    ==========-->
    <target name="default"/>

    <property name="src.dir" value="src"/>
    <property name="build.dir" value="build"/>
    <property name="res.dir" value="res"/>
    <property name="lib.dir" value="lib"/>
    <property name="lib.default.dir" value="${lib.dir}/default"/>
    <property name="lib.master.dir" value="${lib.dir}/master"/>
    <property name="lib.compile.dir" value="${lib.dir}/compile"/>
    <property name="lib.runtime.dir" value="${lib.dir}/runtime"/>

    <!--special file or directory-->
    <available property="exist.git" file=".git" type="dir"/>
    <available property="exist.ivy" file="ivy.xml" type="file"/>
    <available property="exist.lib" file="${lib.dir}" type="dir"/>

    <!--==
    import
    ===-->
    <import file="ant-git.xml"/>

    <!--====================
    custom extension section
    =====================-->
    <extension-point name="-pre-init"/>
    <extension-point name="-post-init"/>
    <extension-point name="-post-retrieve"/>
    <extension-point name="-pre-compile"/>
    <extension-point name="-post-compile"/>
    <extension-point name="-post-clean"/>
    <extension-point name="-post-clean-all"/>
    <extension-point name="-help-extend"/>
    <extension-point name="-echo-classpath-extend"/>

    <!--=================
    help document section
    ===================-->
    <target name="-help-general">
        <echo>Usage : ant TASK [-DKEY=VALUE...]</echo>
        <echo/>
        <echo>task are listed below for each task module</echo>
    </target>
    <target name="-help-build">
        <echo>help : list task and help document</echo>
        <echo>init : initialize task</echo>
        <echo>retrieve : retrieve lost library at ${lib.dir}</echo>
        <echo>clean-retrieve : redo retrieve library at ${lib.dir}</echo>
        <echo>echo-classpath : echo classpath</echo>
        <echo/>
        <echo>compile : compile source file under ${src.dir}/ to ${build.dir}/</echo>
        <echo/>
        <echo>clean : clean</echo>
        <echo>clean-all : clean</echo>
    </target>
    <target name="help" depends="-help-general,-help-build,-help-extend"/>

    <!--===========
    initial section
    ============-->

    <target name="-init-properties" depends="-pre-init">
        <property file="${basedir}/build.properties"/>
    </target>
    <target name="-init-version" depends="-init-properties" unless="project.version">
        <git-describe property="project.version" unless:set="project.version" if:set="exist.git"/>
        <tstamp unless:set="project.version">
            <format property="time.stamp" pattern="yyyyMMdd"/>
        </tstamp>
        <property name="project.version" value="snapshot-${time.stamp}" unless:set="project.version"/>
    </target>
    <target name="-init-prepare" depends="-init-properties,-init-version"/>
    <target name="-init" depends="-init-prepare">
        <!--==========
        implement site
        ===========-->
    </target>
    <target name="init-classpath" depends="-init,-try-retrieve">
        <!--<available property="exist.lib.default.dir" file="${lib.default.dir}" type="dir"/>-->
        <available property="exist.lib.compile.dir" file="${lib.compile.dir}" type="dir"/>
        <available property="exist.lib.runtime.dir" file="${lib.runtime.dir}" type="dir"/>
        <!--<path id="real.default.classpath">-->
        <!--<pathelement path="${classpath}" if:set="classpath"/>-->
        <!--<pathelement path="${default.classpath}" if:set="default.classpath"/>-->
        <!--<pathelement path="${master.classpath}" if:set="master.classpath"/>-->
        <!--<pathelement path="${compile.classpath}" if:set="compile.classpath"/>-->
        <!--<pathelement path="${runtime.classpath}" if:set="runtime.classpath"/>-->
        <!--<fileset dir="${lib.default.dir}" if:set="exist.lib.default.dir">-->
        <!--<include name="*.jar"/>-->
        <!--</fileset>-->
        <!--</path>-->
        <path id="real.compile.classpath.ref">
            <pathelement path="${classpath}" if:set="classpath"/>
            <pathelement path="${master.classpath}" if:set="master.classpath"/>
            <pathelement path="${compile.classpath}" if:set="compile.classpath"/>
            <fileset dir="${lib.compile.dir}" if:set="exist.lib.compile.dir">
                <include name="*.jar"/>
            </fileset>
        </path>
        <path id="real.runtime.classpath.ref">
            <pathelement path="${classpath}" if:set="classpath"/>
            <pathelement path="${master.classpath}" if:set="master.classpath"/>
            <pathelement path="${compile.classpath}" if:set="compile.classpath"/>
            <pathelement path="${runtime.classpath}" if:set="runtime.classpath"/>
            <fileset dir="${lib.runtime.dir}" if:set="exist.lib.runtime.dir">
                <include name="*.jar"/>
            </fileset>
        </path>
        <pathconvert property="real.compile.classpath" refid="real.compile.classpath.ref"/>
        <pathconvert property="real.runtime.classpath" refid="real.runtime.classpath.ref"/>
    </target>
    <target name="init" depends="-init,-post-init" description="init project"/>
    <target name="-echo-classpath" depends="init-classpath">
        <echo>real.compile.classpath=${real.compile.classpath}</echo>
        <echo>real.runtime.classpath=${real.runtime.classpath}</echo>
    </target>
    <target name="echo-classpath" depends="init-classpath,-echo-classpath,-echo-classpath-extend"/>

    <!--===================
    task (retrieve) section
    ====================-->
    <target name="-retrieve" if="exist.ivy">
        <ivy:retrieve pattern="${lib.dir}/[conf]/[artifact].[ext]"/>
    </target>
    <target name="-try-retrieve" if="exist.ivy" unless="exist.lib">
        <antcall target="-retrieve" inheritAll="true"/>
        <antcall target="-post-retrieve" inheritAll="true"/>
    </target>
    <target name="retrieve" depends="-retrieve,-post-retrieve"/>
    <target name="clean-retrieve" if="exist.ivy">
        <delete dir="${lib.dir}"/>
        <ivy:retrieve pattern="${lib.dir}/[conf]/[artifact].[ext]"/>
    </target>

    <!--===========
    compile section
    ============-->
    <target name="-compile-init">
        <mkdir dir="${build.dir}"/>
    </target>
    <target name="-compile-prepare" depends="init,init-classpath,-compile-init,-pre-compile"/>
    <target name="-compile" depends="-compile-prepare">
        <!--==========
        implement site
        ===========-->
    </target>
    <target name="compile" depends="-compile,-post-compile"/>

    <!--=========
    clean section
    ==========-->
    <target name="-clean" depends="init">
        <delete dir="${build.dir}"/>
    </target>
    <target name="-clean-all" depends="-clean">
        <delete dir="${lib.dir}"/>
    </target>
    <target name="clean" depends="-clean,-post-clean"/>
    <target name="clean-all" depends="-clean-all,-post-clean,-post-clean-all"/>

</project>