<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:ivy="antlib:org.apache.ivy.ant"
         xmlns:if="ant:if"
         xmlns:unless="ant:unless">
    <!--===============
    Directory Structure
    ===================
    .
    ├ build.xml
    ├ ivy.xml
    ├ src           ${src.dir}
    ├ res           ${res.dir}
    │ └ META-INF
    ├ lib           ${lib.dir}
    │ ├ default     ${lib.default.dir}
    │ ├ master      ${lib.master.dir}
    │ ├ compile     ${lib.compile.dir}
    │ └ runtime     ${lib.runtime.dir}
    └ build         ${build.dir}

    ================-->

    <property name="src.dir" value="src"/>
    <property name="build.dir" value="build"/>
    <property name="res.dir" value="res"/>

    <!--==============
    import and include
    ===============-->
    <include file="ant-git.xml"/>
    <include file="ant-classpath.xml"/>
    <import file="java-ivy.xml"/>

    <!--====================
    custom extension section
    =====================-->
    <extension-point name="-pre-init"/>
    <extension-point name="-post-init"/>
    <extension-point name="-pre-compile"/>
    <extension-point name="-post-compile"/>
    <extension-point name="-post-clean"/>
    <extension-point name="-post-clean-all"/>
    <extension-point name="-echo-classpath-extend"/>

    <!--===========
    initial section
    ============-->

    <target name="-init-properties" depends="-pre-init">
        <property file="${basedir}/build.properties"/>
    </target>
    <target name="-init-version" depends="-init-properties" unless="project.version">
        <git-describe property="project.version" unless:set="project.version" if:set="exist.git"/>
        <tstamp unless:set="project.version">
            <format property="time.stamp" pattern="yyyyMMdd"/>
        </tstamp>
        <property name="project.version" value="snapshot-${time.stamp}" unless:set="project.version"/>
    </target>
    <target name="-init-prepare" depends="-init-properties,-init-version"/>
    <target name="-init" depends="-init-prepare">
        <!--==========
        implement site
        ===========-->
    </target>
    <target name="init-classpath" depends="-init,-init-lib,try-retrieve" description="initialize classpath">
        <property name="lib.compile.dir" value="${lib.dir}/compile"/>
        <property name="lib.runtime.dir" value="${lib.dir}/runtime"/>
        <resolve-classpath property="real.compile.classpath" dir="${lib.compile.dir}">
            <pathelement path="${classpath}" if:set="classpath"/>
            <pathelement path="${master.classpath}" if:set="master.classpath"/>
            <pathelement path="${compile.classpath}" if:set="compile.classpath"/>
        </resolve-classpath>
        <resolve-classpath property="real.runtime.classpath" dir="${lib.runtime.dir}">
            <pathelement path="${classpath}" if:set="classpath"/>
            <pathelement path="${master.classpath}" if:set="master.classpath"/>
            <pathelement path="${compile.classpath}" if:set="compile.classpath"/>
            <pathelement path="${runtime.classpath}" if:set="runtime.classpath"/>
        </resolve-classpath>
    </target>
    <target name="init" depends="-init,-post-init" description="initialize task"/>
    <target name="-echo-classpath" depends="init-classpath">
        <echo>real.compile.classpath=${real.compile.classpath}</echo>
        <echo>real.runtime.classpath=${real.runtime.classpath}</echo>
    </target>
    <target name="echo-classpath" depends="init-classpath,-echo-classpath,-echo-classpath-extend"
            description="print classpath"/>

    <!--===========
    compile section
    ============-->
    <target name="-compile-init">
        <mkdir dir="${build.dir}"/>
    </target>
    <target name="-compile-prepare" depends="init,init-classpath,-compile-init,-pre-compile"/>
    <target name="-compile" depends="-compile-prepare">
        <!--==========
        implement site
        ===========-->
    </target>
    <target name="compile" depends="-compile,-post-compile" description="compile source file"/>

    <!--=========
    clean section
    ==========-->
    <target name="-clean" depends="init">
        <delete dir="${build.dir}"/>
    </target>
    <target name="clean" depends="-clean,-post-clean" description="clean build result"/>
    <target name="clean-all" depends="clean,clean-lib,-post-clean-all" description="clean all"/>

</project>
